<%#
 Copyright 2013-2024 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      https://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
<%#
 This is a fragment file, it will be merged into to root template if available.
 EJS fragments will process % delimiter tags in template and & delimiter tags in the merge process.
-%>
<&_ if (fragment.introSection) { -&>
This application was generated with [MHipster](https://github.com/jhipster/generator-jhipster-micronaut), a [Micronaut](https://micronaut.io) blueprint for [JHipster](https://www.jhipster.tech)!
You can find documentation and help at [https://github.com/jhipster/generator-jhipster-micronaut](https://github.com/jhipster/generator-jhipster-micronaut).

<&_ } -&>

<&_ if (fragment.structureSection) { -&>
Node is required for generation and recommended for development. `package.json` is always generated for a better development experience with prettier, commit hooks, scripts and so on.

In the project root, JHipster generates configuration files for tools like git, prettier, eslint, husky, and others that are well known and you can find references in the web.

  <%_ if (backendTypeJavaAny) { %>
`/src/*` structure follows default <%= backendType %> structure.

  <%_ } _%>
- `.yo-rc.json` - Yeoman configuration file
JHipster configuration is stored in this file at `generator-jhipster` key. You may find `generator-jhipster-*` for specific blueprints configuration.
- `.yo-resolve` (optional) - Yeoman conflict resolver
Allows to use a specific action when conflicts are found skipping prompts for files that matches a pattern. Each line should match `[pattern] [action]` with pattern been a [Minimatch](https://github.com/isaacs/minimatch#minimatch) pattern and action been one of skip (default if ommited) or force. Lines starting with `#` are considered comments and are ignored.
- `.jhipster/*.json` - JHipster entity configuration files
  <%_ if (!skipClient) { %>
- `npmw` - wrapper to use locally installed npm.
JHipster installs Node and npm locally using the build tool by default. This wrapper makes sure npm is installed locally and uses it avoiding some differences different versions can cause. By using `./npmw` instead of the traditional `npm` you can configure a Node-less environment to develop or test your application.
  <%_ } _%>
- `/src/main/docker` - Docker configurations for the application and services that the application depends on

<&_ } -&>

<&_ if (fragment.developmentSection) { -&>
  <%_ if (skipClient) { _%>
To start your application in the dev profile, run:

```
<% if (buildToolMaven) { %>./mvnw<% } %><% if (buildToolGradle) { %>./gradlew<% } %>
```

For further instructions on how to develop with JHipster, have a look at [Using JHipster in development][].

  <%_ } _%>
<%_ if (authenticationTypeOauth2) { -%>
### OAuth 2.0 / OpenID Connect

Congratulations! You've selected an excellent way to secure your JHipster application. If you're not sure what OAuth and OpenID Connect (OIDC) are, please see [What the Heck is OAuth?](https://developer.okta.com/blog/2017/06/21/what-the-heck-is-oauth)

To log in to your app, you'll need to have [Keycloak](https://keycloak.org) up and running. The JHipster Team has created a Docker container for you that has the default users and roles. Start Keycloak using the following command.

```
docker compose -f src/main/docker/keycloak.yml up
```

The security settings in `src/main/resources/config/application.yml` are configured for this image.

```yaml
micronaut:
  ...
  security:
    oauth2:
      enabled: true
      clients:
        oidc:
          client-secret: web_app
          client-id: web_app
          openid:
            issuer: http://localhost:9080/realms/jhipster
      login-uri: /oauth2/authorization{/provider}
      callback-uri: /oauth2/callback{/provider}
```

<%_ } _%>

<%_ if (enableSwaggerCodegen) { _%>
### Doing API-First development using openapi-generator-cli

[OpenAPI-Generator]() is configured for this application. You can generate API code from the `src/main/resources/swagger/api.yml` definition file by running:
    <%_ if (buildToolMaven) { _%>
```bash
./mvnw generate-sources
```
    <%_ } _%>
    <%_ if (buildToolGradle) { _%>
```bash
./gradlew openApiGenerate
```
    <%_ } _%>
Then implements the generated delegate classes with `@Singleton` classes.

To edit the `api.yml` definition file, you can use a tool such as [Swagger-Editor](). Start a local instance of the swagger-editor using docker by running: `docker compose -f src/main/docker/swagger-editor.yml up -d`. The editor will then be reachable at [http://localhost:7742](http://localhost:7742).

Refer to [Doing API-First development][] for more details.
<%_ } _%>

<&_ } -&>

<&_ if (fragment.testingSection) { -&>
### Micronaut tests

To launch your application's tests, run:

```
<%_ if (buildToolMaven) { _%>
./mvnw verify
<%_ } else { _%>
./gradlew test integrationTest jacocoTestReport
<%_ } _%>
```

<&_ } -&>

<&_ if (fragment.productionSection) { -&>
### Packaging as jar

To build the final jar and optimize the <%= baseName %> application for production, run:

```
<%_ if (buildToolMaven) { _%>
./mvnw -Pprod clean verify
<%_ } _%>
<%_ if (buildToolGradle) { _%>
./gradlew -Pprod clean shadowJar
<%_ } _%>
```

<%_ if (!skipClient) { _%>
This will concatenate and minify the client CSS and JavaScript files. It will also modify `index.html` so it references these new files.
<%_ } _%>
To ensure everything worked, run:

```
<%_ if (buildToolMaven) { _%>
java -jar target/*.jar
<%_ } _%>
<%_ if (buildToolGradle) { _%>
java -jar build/libs/*.jar
<%_ } _%>
```

<% if (!skipClient) { %>Then navigate to [http://localhost:<%= serverPort %>](http://localhost:<%= serverPort %>) in your browser.
<% } %>
Refer to [Using JHipster in production][] for more details.

### Packaging as war

To package your application as a war in order to deploy it to an application server, run:

```
<%_ if (buildToolMaven) { _%>
./mvnw -Pprod,war clean verify
<%_ } _%>
<%_ if (buildToolGradle) { _%>
./gradlew -Pprod -Pwar clean bootWar
<%_ } _%>
```

### JHipster Control Center

JHipster Control Center can help you manage and control your application(s). You can start a local control center server (accessible on http://localhost:7419) with:

```
docker compose -f src/main/docker/jhipster-control-center.yml up
```

<&_ } -&>

<&_ if (fragment.othersSection) { -&>

### Code quality using Sonar

Sonar is used to analyse code quality. You can start a local Sonar server (accessible on http://localhost:9001) with:

```
docker compose -f src/main/docker/sonar.yml up -d
```

Note: we have turned off forced authentication redirect for UI in [src/main/docker/sonar.yml](src/main/docker/sonar.yml) for out of the box experience while trying out SonarQube, for real use cases turn it back on.

You can run a Sonar analysis with using the [sonar-scanner](https://docs.sonarqube.org/display/SCAN/Analyzing+with+SonarQube+Scanner)<% if (buildTool) { %> or by using the <% if (buildTool === 'maven') { %>maven<% } %><% if (buildTool === 'gradle') { %>gradle<% } %> plugin<% } %>.

Then, run a Sonar analysis:

<%_ if (buildToolMaven) { _%>
```
./mvnw -Pprod clean verify sonar:sonar -Dsonar.login=admin -Dsonar.password=admin
```

If you need to re-run the Sonar phase, please be sure to specify at least the `initialize` phase since Sonar properties are loaded from the sonar-project.properties file.

```
./mvnw initialize sonar:sonar -Dsonar.login=admin -Dsonar.password=admin
```
<%_ } else if (buildToolGradle) { _%>
```
./gradlew -Pprod clean check jacocoTestReport sonarqube -Dsonar.login=admin -Dsonar.password=admin
```
<%_ } _%>

Additionally, Instead of passing `sonar.password` and `sonar.login` as CLI arguments, these parameters can be configured from [sonar-project.properties](sonar-project.properties) as shown below:

```
sonar.login=admin
sonar.password=admin
```

For more information, refer to the [Code quality page][].

### Using Docker to simplify development (optional)

You can use Docker to improve your JHipster development experience. A number of docker-compose configuration are available in the [src/main/docker](src/main/docker) folder to launch required third party services.

<%_ if (!databaseTypeNo) { _%>
For example, to start a <%= prodDatabaseType %> database in a docker container, run:

```
docker compose -f src/main/docker/<%= prodDatabaseType ?? databaseType %>.yml up -d
```

To stop it and remove the container, run:

```
docker compose -f src/main/docker/<%= prodDatabaseType ?? databaseType %>.yml down
```
<%_ } _%>

You can also fully dockerize your application and all the services that it depends on.
To achieve this, first build a docker image of your app by running:

```
npm run java:docker
```

Or build a arm64 docker image when using an arm64 processor os like MacOS with M1 processor family running:

```
npm run java:docker:arm64
```

Then run:

```
docker compose -f <%- dockerServicesDir %>app.yml up -d
```

When running Docker Desktop on MacOS Big Sur or later, consider enabling experimental `Use the new Virtualization framework` for better processing performance ([disk access performance is worse](https://github.com/docker/roadmap/issues/7)).

For more information refer to [Using Docker and Docker-Compose][], this page also contains information on the docker-compose sub-generator (`jhipster docker-compose`), which is able to generate docker configurations for one or several JHipster applications.

## Continuous Integration (optional)

To configure CI for your project, run the ci-cd sub-generator (`jhipster ci-cd`), this will let you generate configuration files for a number of Continuous Integration systems. Consult the [Setting up Continuous Integration][] page for more information.

<&_ } -&>

<&_ if (fragment.referenceSection) { -&>
[Micronaut Blueprint for JHipster]: https://github.com/jhipster/generator-jhipster-micronaut
[Micronaut]: https://micronaut.io
  <%_ if (enableSwaggerCodegen) { _%>
[OpenAPI-Generator]: https://openapi-generator.tech
[Swagger-Editor]: https://editor.swagger.io
[Doing API-First development]: <%= documentationArchiveUrl %>/doing-api-first-development/
  <%_ } _%>
<&_ } -&>
