package <%=packageName%>.service;
<%_ if (cacheProvider === 'redis') { _%>
import <%= packageName %>.RedisTestContainerExtension;
<%_ } _%>
import <%= packageName %>.config.Constants;
import <%= packageName %>.domain.User;
import <%= packageName %>.util.JHipsterProperties;
import io.micronaut.context.MessageSource;
import io.micronaut.context.annotation.Property;
import io.micronaut.email.BodyType;
import io.micronaut.email.Email;
import io.micronaut.email.EmailSender;
import io.micronaut.email.template.DefaultTemplateBodyDecorator;
import io.micronaut.email.template.TemplateBody;
import io.micronaut.test.extensions.junit5.annotation.MicronautTest;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestInstance;
import org.thymeleaf.TemplateEngine;
import jakarta.inject.Inject;
<%_ if (cacheProvider === 'redis') { _%>
import org.junit.jupiter.api.extension.ExtendWith;
<%_ } _%>

import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import java.net.URI;
import java.net.URL;
import java.nio.charset.Charset;
import java.util.Properties;
import java.util.concurrent.CompletableFuture;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import static org.assertj.core.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

import org.mockito.ArgumentCaptor;
import org.mockito.Captor;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

/**
 * Integration tests for {@link MailService}.
 */
<%_ if (cacheProvider === 'redis') { _%>
@ExtendWith(RedisTestContainerExtension.class)
<%_ } _%>
@MicronautTest(transactional = false)
@Property(name = "micronaut.security.enabled", value = "false")
@TestInstance(TestInstance.Lifecycle.PER_CLASS)
public class MailServiceIT {

    private static final String[] languages = {
        // jhipster-needle-i18n-language-constant - JHipster will add/remove languages in this array
    };
    private static final Pattern PATTERN_LOCALE_3 = Pattern.compile("([a-z]{2})-([a-zA-Z]{4})-([a-z]{2})");
    private static final Pattern PATTERN_LOCALE_2 = Pattern.compile("([a-z]{2})-([a-z]{2})");

    @Inject
    private JHipsterProperties jHipsterProperties;
    @Inject
    private DefaultTemplateBodyDecorator decorator;
    @Inject
    private MessageSource messageSource;
    @Mock
    private EmailSender mailer;
    @Captor
    private ArgumentCaptor<Email.Builder> messageCaptor;
    private MailService mailService;

    @BeforeEach
    public void setup() {
        MockitoAnnotations.openMocks(this);
        when(mailer.send(any())).thenReturn(new CompletableFuture<>());
        mailService = new MailService(jHipsterProperties, mailer, messageSource);
    }

    @Test
    void testSendEmail() throws Exception {
        mailService.sendEmail("john.doe@example.com", "testSubject", "testContent", false);
        verify(mailer).send(messageCaptor.capture());
        Email.Builder message = messageCaptor.getValue();
        assertThat(message.getSubject().orElseThrow()).isEqualTo("testSubject");
        assertThat(message.getTo().orElseThrow().get(0).getEmail()).isEqualTo("john.doe@example.com");
        assertThat(message.getFrom().orElseThrow().getEmail()).isEqualTo(jHipsterProperties.getMail().getFrom());
        assertThat(message.getBody().orElseThrow().get(BodyType.TEXT).orElseThrow()).isInstanceOf(String.class);
        assertThat(message.getBody().orElseThrow().get(BodyType.TEXT).orElseThrow()).hasToString("testContent");
    }

    @Test
    void testSendHtmlEmail() throws Exception {
        mailService.sendEmail("john.doe@example.com", "testSubject", "testContent", true);
        verify(mailer).send(messageCaptor.capture());
        Email.Builder message = messageCaptor.getValue();
        assertThat(message.getSubject().orElseThrow()).isEqualTo("testSubject");
        assertThat(message.getTo().orElseThrow().get(0).getEmail()).isEqualTo("john.doe@example.com");
        assertThat(message.getFrom().orElseThrow().getEmail()).isEqualTo(jHipsterProperties.getMail().getFrom());
        assertThat(message.getBody().orElseThrow().get(BodyType.HTML).orElseThrow()).isInstanceOf(String.class);
        assertThat(message.getBody().orElseThrow().get(BodyType.HTML).orElseThrow()).hasToString("testContent");
    }

    <%_ if (authenticationType !== 'oauth2') { _%>
    @Test
    void testSendEmailFromTemplate() throws Exception {
        User user = new User();
        user.setLogin("john");
        user.setEmail("john.doe@example.com");
        user.setLangKey("en");
        mailService.sendEmailFromTemplate(user, "mail/testEmail", "email.test.title");
        verify(mailer).send(messageCaptor.capture());
        Email.Builder message = messageCaptor.getValue();
        assertThat(message.getSubject().orElseThrow()).isEqualTo("test title");
        assertThat(message.getTo().orElseThrow().get(0).getEmail()).isEqualTo("john.doe@example.com");
        assertThat(message.getFrom().orElseThrow().getEmail()).isEqualTo(jHipsterProperties.getMail().getFrom());
        assertThat(message.getBody().orElseThrow()).isInstanceOf(TemplateBody.class);
        TemplateBody<?> body = (TemplateBody<?>) message.getBody().orElseThrow();
        decorator.renderBody(body, BodyType.HTML);
        assertThat(body.get(BodyType.HTML).orElseThrow()).isEqualToNormalizingNewlines("<html>test title, http://127.0.0.1:8080, john</html>\n");
    }

    @Test
    void testSendActivationEmail() throws Exception {
        User user = new User();
        user.setLangKey(Constants.DEFAULT_LANGUAGE);
        user.setLogin("john");
        user.setEmail("john.doe@example.com");
        mailService.sendActivationEmail(user);
        verify(mailer).send(messageCaptor.capture());
        Email.Builder message = messageCaptor.getValue();
        assertThat(message.getTo().orElseThrow().get(0).getEmail()).isEqualTo("john.doe@example.com");
        assertThat(message.getFrom().orElseThrow().getEmail()).isEqualTo(jHipsterProperties.getMail().getFrom());
        assertThat(message.getBody().orElseThrow()).isInstanceOf(TemplateBody.class);
        TemplateBody<?> body = (TemplateBody<?>) message.getBody().orElseThrow();
        decorator.renderBody(body, BodyType.HTML);
        assertThat(body.get(BodyType.HTML).orElseThrow()).isNotEmpty();
    }

    @Test
    void testCreationEmail() throws Exception {
        User user = new User();
        user.setLangKey(Constants.DEFAULT_LANGUAGE);
        user.setLogin("john");
        user.setEmail("john.doe@example.com");
        mailService.sendCreationEmail(user);
        verify(mailer).send(messageCaptor.capture());
        Email.Builder message = messageCaptor.getValue();
        assertThat(message.getTo().orElseThrow().get(0).getEmail()).isEqualTo("john.doe@example.com");
        assertThat(message.getFrom().orElseThrow().getEmail()).isEqualTo(jHipsterProperties.getMail().getFrom());
        assertThat(message.getBody().orElseThrow()).isInstanceOf(TemplateBody.class);
        TemplateBody<?> body = (TemplateBody<?>) message.getBody().orElseThrow();
        decorator.renderBody(body, BodyType.HTML);
        assertThat(body.get(BodyType.HTML).orElseThrow()).isNotEmpty();
    }

    @Test
    void testSendPasswordResetMail() throws Exception {
        User user = new User();
        user.setLangKey(Constants.DEFAULT_LANGUAGE);
        user.setLogin("john");
        user.setEmail("john.doe@example.com");
        mailService.sendPasswordResetMail(user);
        verify(mailer).send(messageCaptor.capture());
        Email.Builder message = messageCaptor.getValue();
        assertThat(message.getTo().orElseThrow().get(0).getEmail()).isEqualTo("john.doe@example.com");
        assertThat(message.getFrom().orElseThrow().getEmail()).isEqualTo(jHipsterProperties.getMail().getFrom());
        assertThat(message.getBody().orElseThrow()).isInstanceOf(TemplateBody.class);
        TemplateBody<?> body = (TemplateBody<?>) message.getBody().orElseThrow();
        decorator.renderBody(body, BodyType.HTML);
        assertThat(body.get(BodyType.HTML).orElseThrow()).isNotEmpty();
    }
    <%_ } _%>

    @Test
    public void testSendLocalizedEmailForAllSupportedLanguages() throws Exception {
        <%= user.persistClass %> user = new <%= user.persistClass %>();
        user.setLogin("john");
        user.setEmail("john.doe@example.com");
        for (String langKey : languages) {
            user.setLangKey(langKey);
            mailService.sendEmailFromTemplate(user, "mail/testEmail", "email.test.title");
            verify(mailer, atLeastOnce()).send(messageCaptor.capture());
            Email.Builder message = messageCaptor.getValue();

            String propertyFilePath = "i18n/messages_" + getJavaLocale(langKey) + ".properties";
            URL resource = this.getClass().getClassLoader().getResource(propertyFilePath);
            File file = new File(new URI(resource.getFile()).getPath());
            Properties properties = new Properties();
            properties.load(new InputStreamReader(new FileInputStream(file), Charset.forName("UTF-8")));

            String emailTitle = (String) properties.get("email.test.title");
            assertThat(message.getSubject().orElseThrow()).isEqualTo(emailTitle);
            assertThat(message.getBody().orElseThrow()).isInstanceOf(TemplateBody.class);
            TemplateBody<?> body = (TemplateBody<?>) message.getBody().orElseThrow();
            decorator.renderBody(body, BodyType.HTML);
            assertThat(body.get(BodyType.HTML).orElseThrow()).isEqualToNormalizingNewlines("<html>" + emailTitle + ", http://127.0.0.1:8080, john</html>\n");
        }
    }

    /**
     * Convert a lang key to the Java locale.
     */
    private String getJavaLocale(String langKey) {
        String javaLangKey = langKey;
        Matcher matcher2 = PATTERN_LOCALE_2.matcher(langKey);
        if (matcher2.matches()) {
            javaLangKey = matcher2.group(1) + "_"+ matcher2.group(2).toUpperCase();
        }
        Matcher matcher3 = PATTERN_LOCALE_3.matcher(langKey);
        if (matcher3.matches()) {
            javaLangKey = matcher3.group(1) + "_" + matcher3.group(2) + "_" + matcher3.group(3).toUpperCase();
        }
        return javaLangKey;
    }
}
