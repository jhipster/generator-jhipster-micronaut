package <%=packageName%>.security.jwt;

<%_ if (cacheProvider === 'redis') { _%>
import <%= packageName %>.RedisTestContainerExtension;
<%_ } _%>
import <%=packageName%>.security.AuthoritiesConstants;
<%_ if (authenticationType !== 'oauth2') { _%>
import <%=packageName%>.security.DatabaseAuthenticationProvider;
<%_ } _%>

import io.micronaut.core.annotation.Nullable;

import io.micronaut.context.ApplicationContext;
import io.micronaut.context.annotation.Property;
import io.micronaut.context.annotation.Replaces;
import io.micronaut.context.annotation.Requires;
<%_ if (authenticationTypeOauth2) { _%>
import io.micronaut.http.HttpHeaders;
<%_ } _%>
import io.micronaut.http.HttpRequest;
import io.micronaut.http.HttpResponse;
import io.micronaut.http.HttpStatus;
import io.micronaut.http.annotation.Controller;
import io.micronaut.http.annotation.Get;
import io.micronaut.rxjava3.http.client.Rx3HttpClient;
import io.micronaut.http.client.annotation.Client;
import io.micronaut.http.client.exceptions.HttpClientResponseException;
import io.micronaut.runtime.server.EmbeddedServer;
import io.micronaut.security.annotation.Secured;
import io.micronaut.security.authentication.*;
import io.micronaut.security.rules.SecurityRule;
import io.micronaut.security.token.render.AccessRefreshToken;
import io.micronaut.test.extensions.junit5.annotation.MicronautTest;
import io.reactivex.rxjava3.core.Flowable;
import org.junit.jupiter.api.Test;
<%_ if (cacheProvider === 'redis') { _%>
import org.junit.jupiter.api.extension.ExtendWith;
<%_ } _%>
import org.reactivestreams.Publisher;

import jakarta.inject.Inject;
import jakarta.inject.Singleton;
import java.util.Collections;

import static org.assertj.core.api.Assertions.assertThat;

<%_ if (cacheProvider === 'redis') { _%>
@ExtendWith(RedisTestContainerExtension.class)
<%_ } _%>
@MicronautTest
@Property(name = "spec.name", value = "JWTFilterTest")
<%_ if (authenticationTypeOauth2) { _%>
@Property(name = "micronaut.http.client.follow-redirects", value = "false")
<%_ } _%>
public class JWTFilterTest {

    @Inject @Client("/") Rx3HttpClient client;

    @Test
    public void testJWTFilter() throws Exception {
        <%_ if (authenticationTypeOauth2) { _%>

        HttpResponse<?> response = client.exchange(HttpRequest.POST("/api/authenticate", new UsernamePasswordCredentials("test-user", "test-password"))).blockingFirst();
        HttpHeaders headers = response.getHeaders();

        String jwtCookie = headers.getFirst("set-cookie").orElseThrow();
        String jwt = jwtCookie.split("=")[1].split(";")[0];
        <%_ } else { _%>

        AccessRefreshToken token = client.retrieve(HttpRequest.POST("/api/authenticate", new UsernamePasswordCredentials("test-user",
            "test-password")), AccessRefreshToken.class).blockingFirst();

        String jwt = token.getAccessToken();
        <%_ } _%>

        String username = client.retrieve(HttpRequest.GET("/api/test").bearerAuth(jwt)).blockingFirst();

        assertThat(username).isEqualTo("test-user");
    }

    @Test
    public void testJWTFilterInvalidToken() throws Exception {
        String jwt = "wrong_jwt";

        HttpResponse<String> username = client.exchange(HttpRequest.GET("/api/test").bearerAuth(jwt), String.class)
            .onErrorReturn(t -> (HttpResponse<String>) ((HttpClientResponseException) t).getResponse()).blockingFirst();

        assertThat(username.code()).isEqualTo(HttpStatus.UNAUTHORIZED.getCode());
    }

    @Test
    public void testJWTFilterMissingAuthorization() throws Exception {
        HttpResponse<String> username = client.exchange(HttpRequest.GET("/api/test"), String.class)
            .onErrorReturn(t -> (HttpResponse<String>) ((HttpClientResponseException) t).getResponse()).blockingFirst();

        assertThat(username.code()).isEqualTo(HttpStatus.UNAUTHORIZED.getCode());
    }

    @Test
    public void testJWTFilterMissingToken() throws Exception {
        HttpResponse<String> username = client.exchange(HttpRequest.GET("/api/test").bearerAuth(""), String.class)
            .onErrorReturn(t -> (HttpResponse<String>) ((HttpClientResponseException) t).getResponse()).blockingFirst();

        assertThat(username.code()).isEqualTo(HttpStatus.UNAUTHORIZED.getCode());
    }

    @Test
    public void testJWTFilterWrongScheme() throws Exception {
        HttpResponse<String> username = client.exchange(HttpRequest.GET("/api/test").basicAuth("test-user", "test-password"), String.class)
            .onErrorReturn(t -> (HttpResponse<String>) ((HttpClientResponseException) t).getResponse()).blockingFirst();

        assertThat(username.code()).isEqualTo(HttpStatus.UNAUTHORIZED.getCode());
    }

    @Controller("/api")
    static class TestAuthenticationController {

        @Secured(SecurityRule.IS_AUTHENTICATED)
        @Get("/test")
        String test(Authentication authentication) {
            return authentication.getName();
        }
    }

    <%_ if (authenticationType !== 'oauth2') { _%>
    @Replaces(DatabaseAuthenticationProvider.class)
    <%_ } _%>
    @Requires(property = "spec.name", value = "JWTFilterTest")
    @Singleton
    static class MockAuthenticationProvider implements AuthenticationProvider<HttpRequest<?>> {
        @Override
        public Publisher<AuthenticationResponse> authenticate(@Nullable HttpRequest<?> httpRequest, AuthenticationRequest<?, ?> authenticationRequest) {
            if (authenticationRequest.getIdentity().toString().equals("test-user") &&
            authenticationRequest.getSecret().toString().equals("test-password")) {
                return Flowable.just(AuthenticationResponse.success("test-user", Collections.emptyList()));
            }
            return Flowable.empty();
        }
    }

}
