package <%=packageName%>.web.rest;

import <%=packageName%>.config.Constants;
import <%=packageName%>.domain.User;
<%_ if (authenticationType !== 'oauth2') { _%>
import <%=packageName%>.repository.UserRepository;
<%_ } _%>
import <%=packageName%>.security.AuthoritiesConstants;
<%_ if (authenticationType !== 'oauth2') { _%>
import <%=packageName%>.service.MailService;
<%_ } _%>
import <%=packageName%>.service.UserService;
import <%=packageName%>.service.dto.<%= user.adminUserDto %>;
import <%=packageName%>.util.HeaderUtil;
import <%=packageName%>.util.PaginationUtil;
<%_ if (authenticationType !== 'oauth2') { _%>
import <%=packageName%>.web.rest.errors.BadRequestAlertException;
import <%=packageName%>.web.rest.errors.EmailAlreadyUsedException;
import <%=packageName%>.web.rest.errors.LoginAlreadyUsedException;
<%_ } _%>

import io.micronaut.context.annotation.Value;
import io.micronaut.data.model.Page;
import io.micronaut.data.model.Pageable;
import io.micronaut.http.HttpRequest;
import io.micronaut.http.HttpResponse;
import io.micronaut.http.annotation.*;
import io.micronaut.http.uri.UriBuilder;
import io.micronaut.scheduling.TaskExecutors;
import io.micronaut.scheduling.annotation.ExecuteOn;
import io.micronaut.security.annotation.Secured;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import jakarta.validation.Valid;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.*;

/**
 * REST controller for managing users.
 * <p>
 * This class accesses the {@link User} entity, and needs to fetch its collection of authorities.
 * <p>
 * For a normal use-case, it would be better to have an eager relationship between User and Authority,
 * and send everything to the client side: there would be no View Model and DTO, a lot less code, and an outer-join
 * which would be good for performance.
 * <p>
 * We use a View Model and a DTO for 3 reasons:
 * <ul>
 * <li>We want to keep a lazy association between the user and the authorities, because people will
 * quite often do relationships with the user, and we don't want them to get the authorities all
 * the time for nothing (for performance reasons). This is the #1 goal: we should not impact our users'
 * application because of this use-case.</li>
 * <li> Not having an outer join causes n+1 requests to the database. This is not a real issue as
 * we have by default a second-level cache. This means on the first HTTP call we do the n+1 requests,
 * but then all authorities come from the cache, so in fact it's much better than doing an outer join
 * (which will get lots of data from the database, for each HTTP call).</li>
 * <li> As this manages users, for security reasons, we'd rather have a DTO layer.</li>
 * </ul>
 * <p>
 * Another option would be to have a specific JPA entity graph to handle this case.
 */
@Controller("/api/admin")
public class UserResource {

    private final Logger log = LoggerFactory.getLogger(UserResource.class);

    @Value("${jhipster.client-app.name}")
    private String applicationName;

    private final UserService userService;

<%_ if (authenticationType !== 'oauth2') { _%>
    private final UserRepository userRepository;

    private final MailService mailService;

    public UserResource(UserService userService, UserRepository userRepository, MailService mailService) {
        this.userService = userService;
        this.userRepository = userRepository;
        this.mailService = mailService;
    }
<%_ } else { _%>
    public UserResource(UserService userService) {
        this.userService = userService;
    }
<%_ } _%>

<%_ if (authenticationType !== 'oauth2') { _%>
    /**
     * {@code POST  admin/users}  : Creates a new user.
     * <p>
     * Creates a new user if the login and email are not already used, and sends an
     * mail with an activation link.
     * The user needs to be activated on creation.
     *
     * @param userDTO the user to create.
     * @return the {@link HttpResponse} with status {@code 201 (Created)} and with body the new user, or with status {@code 400 (Bad Request)} if the login or email is already in use.
     * @throws URISyntaxException if the Location URI syntax is incorrect.
     * @throws BadRequestAlertException {@code 400 (Bad Request)} if the login or email is already in use.
     */
    @Post("/users")
    @Secured(AuthoritiesConstants.ADMIN)
    @ExecuteOn(TaskExecutors.IO)
    public HttpResponse<<%= user.adminUserDto %>> createUser(@Valid @Body <%= user.adminUserDto %> userDTO) throws URISyntaxException {
        log.debug("REST request to save User : {}", userDTO);

        if (userDTO.getId() != null) {
            throw new BadRequestAlertException("A new user cannot already have an ID", "userManagement", "idexists");
            // Lowercase the user login before comparing with database
        } else if (userRepository.findOneByLogin(userDTO.getLogin().toLowerCase()).isPresent()) {
            throw new LoginAlreadyUsedException();
        } else if (userRepository.findOneByEmailIgnoreCase(userDTO.getEmail()).isPresent()) {
            throw new EmailAlreadyUsedException();
        } else {
            User newUser = userService.createUser(userDTO);
            mailService.sendCreationEmail(newUser);
            return HttpResponse.<User>created(new URI("/api/users/" + newUser.getLogin()))
                .headers(headers ->
                    HeaderUtil.createAlert(headers,
                        applicationName,
                        "userManagement.created",
                        newUser.getLogin()))
                .body(new <%= user.adminUserDto %>(newUser));
        }
    }

    /**
     * {@code PUT admin/users} : Updates an existing User.
     *
     * @param userDTO the user to update.
     * @return the {@link HttpResponse} with status {@code 200 (OK)} and with body the updated user.
     * @throws EmailAlreadyUsedException {@code 400 (Bad Request)} if the email is already in use.
     * @throws LoginAlreadyUsedException {@code 400 (Bad Request)} if the login is already in use.
     */
    @Put("/users")
    @Secured(AuthoritiesConstants.ADMIN)
    @ExecuteOn(TaskExecutors.IO)
    public HttpResponse<<%= user.adminUserDto %>> updateUser(@Valid @Body <%= user.adminUserDto %> userDTO) {
        log.debug("REST request to update User : {}", userDTO);
        Optional<User> existingUser = userRepository.findOneByEmailIgnoreCase(userDTO.getEmail());
        if (existingUser.isPresent() && (!existingUser.get().getId().equals(userDTO.getId()))) {
            throw new EmailAlreadyUsedException();
        }
        existingUser = userRepository.findOneByLogin(userDTO.getLogin().toLowerCase());
        if (existingUser.isPresent() && (!existingUser.get().getId().equals(userDTO.getId()))) {
            throw new LoginAlreadyUsedException();
        }
        Optional<<%= user.adminUserDto %>> updatedUser = userService.updateUser(userDTO);

        return updatedUser.map(user ->
            HttpResponse.ok(user)
                .headers(headers -> HeaderUtil.createAlert(headers, applicationName, "userManagement.updated", userDTO.getLogin()))
            ).orElse(HttpResponse.notFound());
    }
<%_ } _%>

    /**
     * {@code GET admin/users} : get all users.
     *
     * @param pageable the pagination information.
     * @return the {@link HttpResponse} with status {@code 200 (OK)} and with body all users.
     */
    @Get("/users")
    @ExecuteOn(TaskExecutors.IO)
    public HttpResponse<List<<%= user.adminUserDto %>>> getAllUsers(HttpRequest request, Pageable pageable) {
        log.debug("REST request to get Users for admin: {}", pageable);
        final Page<<%= user.adminUserDto %>> page = userService.getAllManagedUsers(pageable);
        return HttpResponse.ok(page.getContent()).headers(headers ->
            PaginationUtil.generatePaginationHttpHeaders(headers, UriBuilder.of(request.getPath()), page)
        );
    }

    /**
     * {@code GET /admin/users/:login} : get the "login" user.
     *
     * @param login the login of the user to find.
     * @return the {@link HttpResponse} with status {@code 200 (OK)} and with body the "login" user, or with status {@code 404 (Not Found)}.
     */
    @Get("/users/{login:" + Constants.LOGIN_REGEX + "}")
    @ExecuteOn(TaskExecutors.IO)
    public Optional<<%= user.adminUserDto %>> getUser(@PathVariable String login) {
        log.debug("REST request to get User : {}", login);
        return userService.getUserWithAuthoritiesByLogin(login)
                .map(<%= user.adminUserDto %>::new);
    }

<%_ if (authenticationType !== 'oauth2') { _%>
    /**
     * {@code DELETE /admin/users/:login} : delete the "login" User.
     *
     * @param login the login of the user to delete.
     * @return the {@link HttpResponse} with status {@code 204 (NO_CONTENT)}.
     */
    @Delete("/users/{login:" + Constants.LOGIN_REGEX + "}")
    @Secured(AuthoritiesConstants.ADMIN)
    @ExecuteOn(TaskExecutors.IO)
    public HttpResponse deleteUser(@PathVariable String login) {
        log.debug("REST request to delete User: {}", login);
        userService.deleteUser(login);
        return HttpResponse.noContent().headers(headers -> HeaderUtil.createAlert(headers, applicationName,  "userManagement.deleted", login));
    }
<%_ } _%>
}
