<%#
 Copyright 2019-2024 the original author or authors.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%= packageName %>.service;

<%_
const serviceClassName = entityClass + 'QueryService';
const instanceType = (dto === 'mapstruct') ? dtoClass : persistClass;
const instanceName = (dto === 'mapstruct') ? dtoInstance : persistInstance;
const mapper = entityInstance  + 'Mapper';
const dtoToEntity = mapper + '.'+ 'toEntity';
const entityToDto = mapper + '.'+ 'toDto';
const entityListToDto = mapper + '.' + 'toDto';
const entityToDtoReference = mapper + '::'+ 'toDto';
const repository = entityInstance  + 'Repository';
const criteria = entityClass + 'Criteria';
_%>
import java.util.List;

import jakarta.persistence.criteria.JoinType;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import io.micronaut.data.model.Page;
import io.micronaut.data.model.Pageable;
import io.micronaut.transaction.annotation.ReadOnly;
import org.springframework.data.jpa.domain.Specification;
import jakarta.inject.Singleton;
import jakarta.transaction.Transactional;

import io.github.jhipster.service.QueryService;

import <%= packageName %>.domain.<%= persistClass %>;
import <%= packageName %>.domain.*; // for static metamodels
import <%= packageName %>.repository.<%= entityClass %>Repository;<% if (searchEngine === 'elasticsearch') { %>
import <%= packageName %>.repository.search.<%= entityClass %>SearchRepository;<% } %>
import <%= packageName %>.service.dto.<%= entityClass %>Criteria;
<%_ if (dto === 'mapstruct') { _%>
import <%= packageName %>.service.dto.<%= dtoClass %>;
import <%= packageName %>.service.mapper.<%= entityClass %>Mapper;
<%_ } _%>

/**
 * Service for executing complex queries for {@link <%= persistClass %>} entities in the database.
 * The main input is a {@link <%= entityClass %>Criteria} which gets converted to {@link Specification},
 * in a way that all the filters must apply.
 * It returns a {@link List} of {@link <%= instanceType %>} or a {@link Page} of {@link <%= instanceType %>} which fulfills the criteria.
 */
@Singleton<% if (databaseTypeSql) { %>
@ReadOnly
@Transactional<% } %>
public class <%= serviceClassName %> extends QueryService<<%= persistClass %>> {

    private final Logger log = LoggerFactory.getLogger(<%= serviceClassName %>.class);
<%- include('../partials_entity/inject_template', {viaService: false, constructorName: serviceClassName, queryService: false, isUsingMapsId: false, mapsIdAssoc: null, isController: false}); -%>

    /**
     * Return a {@link List} of {@link <%= instanceType %>} which matches the criteria from the database.
     * @param criteria The object which holds all the filters, which the entities should match.
     * @return the matching entities.
     */
    @ReadOnly
    @Transactional
    public List<<%= instanceType %>> findByCriteria(<%= criteria %> criteria) {
        log.debug("find by criteria : {}", criteria);
        final Specification<<%= persistClass %>> specification = createSpecification(criteria);
    <%_ if (dto === 'mapstruct') { _%>
        return <%= entityListToDto %>(<%= repository %>.findAll(specification));
    <%_ } else { _%>
        return <%= repository %>.findAll(specification);
    <%_ } _%>
    }

    /**
     * Return a {@link Page} of {@link <%= instanceType %>} which matches the criteria from the database.
     * @param criteria The object which holds all the filters, which the entities should match.
     * @param page The page, which should be returned.
     * @return the matching entities.
     */
    @ReadOnly
    @Transactional
    public Page<<%= instanceType %>> findByCriteria(<%= criteria %> criteria, Pageable page) {
        log.debug("find by criteria : {}, page: {}", criteria, page);
        final Specification<<%= persistClass %>> specification = createSpecification(criteria);
    <%_ if (dto === 'mapstruct') { _%>
        return <%= repository %>.findAll(specification, page)
            .map(<%= entityToDtoReference %>);
    <%_ } else { _%>
        return <%= repository %>.findAll(specification, page);
    <%_ } _%>
    }

    /**
     * Return the number of matching entities in the database.
     * @param criteria The object which holds all the filters, which the entities should match.
     * @return the number of matching entities.
     */
    @ReadOnly
    @Transactional
    public long countByCriteria(<%= criteria %> criteria) {
        log.debug("count by criteria : {}", criteria);
        final Specification<<%= persistClass %>> specification = createSpecification(criteria);
        return <%= repository %>.count(specification);
    }

    /**
     * Function to convert {@link <%= criteria %>} to a {@link Specification}
     * @param criteria The object which holds all the filters, which the entities should match.
     * @return the matching {@link Specification} of the entity.
     */
    protected Specification<<%= persistClass %>> createSpecification(<%= criteria %> criteria) {
        Specification<<%= persistClass %>> specification = Specification.where(null);
        if (criteria != null) {
            if (criteria.getId() != null) {
                specification = specification.and(<%= getSpecificationBuilder(primaryKey.type) %>(criteria.getId(), <%= persistClass %>_.id));
            }
            <%_
            fields.forEach((field) => {
                if (isFilterableType(field.fieldType)) { _%>
            if (criteria.get<%= field.fieldInJavaBeanMethod %>() != null) {
                specification = specification.and(<%= getSpecificationBuilder(field.fieldType) %>(criteria.get<%= field.fieldInJavaBeanMethod %>(), <%= persistClass %>_.<%= field.fieldName %>));
            }
            <%_ }
            });

            relationships.forEach((relationship) => {
                const metamodelFieldName = (relationship.relationshipType === 'many-to-many' || relationship.relationshipType === 'one-to-many') ? relationship.relationshipFieldNamePlural : relationship.relationshipFieldName; _%>
            if (criteria.get<%= relationship.relationshipNameCapitalized %>Id() != null) {
                specification = specification.and(buildSpecification(criteria.get<%= relationship.relationshipNameCapitalized %>Id(),
                    root -> root.join(<%= persistClass %>_.<%= metamodelFieldName %>, JoinType.LEFT).get(<%= relationship.otherEntity.persistClass %>_.id)));
            }
            <%_ }); // forEach
        _%>
        }
        return specification;
    }
}
