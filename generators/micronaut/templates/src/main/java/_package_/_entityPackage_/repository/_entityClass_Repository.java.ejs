<%#
 Copyright 2019-2024 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%= packageName %>.repository;

import <%= packageName %>.domain.<%= persistClass %>;

<%_ if (fieldsContainOwnerManyToMany) { _%>
import io.micronaut.data.model.Page;
import io.micronaut.data.model.Pageable;
<%_ } _%>
<%_ if (databaseTypeSql) { _%>

import io.micronaut.data.annotation.Query;
import io.micronaut.data.annotation.Repository;
import io.micronaut.data.jpa.repository.JpaRepository;


    <%_ if (fieldsContainOwnerManyToMany) { _%>
// TODO what is MN equivalent?
// import org.springframework.data.repository.query.Param;
    <%_ } _%>
<%_ } _%>
<%_ if (databaseType === 'mongodb') { _%>
// TODO what is MN equivalent?
// import org.springframework.data.mongodb.repository.Query;
// import org.springframework.data.mongodb.repository.MongoRepository;
<%_ } _%>
<%_ if (databaseType === 'couchbase') { _%>
// TODO what is MN equivalent?
// import org.springframework.data.couchbase.core.query.Query;
<%_ } _%>
<%_ if (databaseType === 'cassandra') { _%>
// TODO what is MN equivalent?
// import org.springframework.data.cassandra.repository.CassandraRepository;
<%_ } _%>
<%_
if (databaseTypeSql || databaseType === 'mongodb' || databaseType === 'couchbase') {
    let importList = fieldsContainOwnerManyToMany;
    for (r of relationships) {
        if (r.relationshipType === 'many-to-one' && r.otherEntityName === 'user') {
            importList = true;
        }
    }
_%>
    <%_ if (importList || fieldsContainOwnerManyToMany) { _%>

    <%_ } _%>
    <%_ if (importList) { _%>
import java.util.List;
    <%_ } _%>
    <%_ if (fieldsContainOwnerManyToMany) { _%>
import java.util.Optional;
    <%_ } _%>
<%_ } _%>
<%_ if (databaseType === 'cassandra') { _%>

import java.util.UUID;
<%_ } _%>

/**
 * Micronaut Data <% if (databaseType === 'mongodb') { %>MongoDB<% } if (databaseType === 'couchbase') { %>Couchbase<% } if (databaseType === 'cassandra') { %>Cassandra<% } %> repository for the <%= persistClass %> entity.
 */
<%_ if (!fieldsContainOwnerManyToMany) { _%>
@SuppressWarnings("unused")
<%_ } _%>
@Repository
public interface <%= entityClass %>Repository extends <% if (databaseTypeSql) { %>JpaRepository<% } %><% if (databaseType === 'mongodb') { %>MongoRepository<% } %><% if (databaseType === 'cassandra') { %>CassandraRepository<% } %><% if (databaseType === 'couchbase') { %>N1qlCouchbaseRepository<% } %><<%= persistClass %>, <%= primaryKey.type %>><% if (jpaMetamodelFiltering) { %>, JpaSpecificationExecutor<<%= persistClass %>><% } %> {

    <%_ for (idx in relationships) {
        if (relationships[idx].relationshipType === 'many-to-one' && relationships[idx].otherEntityName === 'user' && databaseTypeSql) { _%>

    @Query("select <%= entityInstance %> from <%= persistClass %> <%= entityInstance %> where <%= entityInstance %>.<%= relationships[idx].relationshipFieldName %>.login = :username ")
    public List<<%= persistClass %>> findBy<%= relationships[idx].relationshipNameCapitalized %>IsCurrentUser(String username);
    <%_ } } _%>
    <%_ if (fieldsContainOwnerManyToMany) {
        if (databaseTypeSql) { _%>

    @Query(value = "select distinct <%= entityInstance %>_ from <%= persistClass %> <%= entityInstance %>_<% for (idx in relationships) {
    if (relationships[idx].relationshipType === 'many-to-many' && relationships[idx].ownerSide === true) { %> left join fetch <%= entityInstance %>_.<%= relationships[idx].relationshipFieldNamePlural %><% } } %>",
        countQuery = "select count(distinct <%= entityInstance %>_) from <%= persistClass %> <%= entityInstance %>_")
    public Page<<%= persistClass %>> findAllWithEagerRelationships(Pageable pageable);

    @Query("select distinct <%= entityInstance %> from <%= persistClass %> <%= entityInstance %><% for (idx in relationships) {
    if (relationships[idx].relationshipType === 'many-to-many' && relationships[idx].ownerSide === true) { %> left join fetch <%= entityInstance %>.<%= relationships[idx].relationshipFieldNamePlural %><% } } %>")
    public List<<%= persistClass %>> findAllWithEagerRelationships();

    @Query("select <%= entityInstance %> from <%= persistClass %> <%= entityInstance %><% for (idx in relationships) {
    if (relationships[idx].relationshipType === 'many-to-many' && relationships[idx].ownerSide === true) { %> left join fetch <%= entityInstance %>.<%= relationships[idx].relationshipFieldNamePlural %><% } } %> where <%= entityInstance %>.id =:id")
    public Optional<<%= persistClass %>> findOneWithEagerRelationships(<%= primaryKey.type %> id);
    <%_
        } else if (databaseType === 'mongodb' || databaseType === 'couchbase')  { _%>

    @Query("<%= (databaseType === 'mongodb')?'{}':'#{#n1ql.selectEntity} WHERE #{#n1ql.filter}'%>")
    public Page<<%= persistClass %>> findAllWithEagerRelationships(Pageable pageable);

    @Query("<%= (databaseType === 'mongodb')?'{}':'#{#n1ql.selectEntity} WHERE #{#n1ql.filter}'%>")
    public List<<%= persistClass %>> findAllWithEagerRelationships();

    @Query("<%- (databaseType === 'mongodb')?"{'id': ?0}":"#{#n1ql.selectEntity} USE KEYS $1 WHERE #{#n1ql.filter}"%>")
    public Optional<<%= persistClass %>> findOneWithEagerRelationships(<%= primaryKey.type %> id);
    <%_ }
    } _%>
}
