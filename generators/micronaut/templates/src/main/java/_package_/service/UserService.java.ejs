<%_
const usesCache = cacheProvider !== 'no';
_%>
package <%=packageName%>.service;

import <%=packageName%>.config.Constants;
import <%=packageName%>.domain.Authority;
import <%=packageName%>.domain.User;
import <%=packageName%>.repository.AuthorityRepository;
import <%=packageName%>.repository.UserRepository;
import <%=packageName%>.security.AuthoritiesConstants;
import <%=packageName%>.security.SecurityUtils;
import <%=packageName%>.service.dto.<%= user.adminUserDto %>;
import <%=packageName%>.service.dto.<%= user.dtoClass %>;
import <%=packageName%>.service.util.RandomUtil;
import <%=packageName%>.web.rest.errors.*;
<%_ if (authenticationType !== 'oauth2') { _%>
import <%=packageName%>.security.PasswordEncoder;
<%_ } _%>
<%_ if (usesCache) { _%>
import io.micronaut.cache.CacheManager;
import io.micronaut.cache.interceptor.ParametersKey;
<%_ } _%>
import io.micronaut.data.model.Page;
import io.micronaut.data.model.Pageable;
import io.micronaut.scheduling.annotation.Scheduled;
import io.micronaut.transaction.annotation.ReadOnly;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import jakarta.inject.Singleton;
import jakarta.transaction.Transactional;
import java.time.Instant;
import java.time.temporal.ChronoUnit;
import java.util.*;
import java.util.stream.Collectors;

/**
 * Service class for managing users.
 */
@Singleton
@Transactional
public class UserService {

    private final Logger log = LoggerFactory.getLogger(UserService.class);

    private final UserRepository userRepository;
    <%_ if (authenticationType !== 'oauth2') { _%>
    private final PasswordEncoder passwordEncoder;
    <%_ } _%>

    private final AuthorityRepository authorityRepository;

    <%_ if (usesCache) { _%>
    private final CacheManager cacheManager;
    <%_ } _%>

    public UserService(UserRepository userRepository<% if (authenticationType !== 'oauth2') { %>, PasswordEncoder passwordEncoder<% } %>, AuthorityRepository authorityRepository<% if (usesCache) { %>, CacheManager cacheManager<% } %>) {
        this.userRepository = userRepository;
        <%_ if (authenticationType !== 'oauth2') { _%>
        this.passwordEncoder = passwordEncoder;
        <%_ } _%>
        this.authorityRepository = authorityRepository;
        <%_ if (usesCache) { _%>
        this.cacheManager = cacheManager;
        <%_ } _%>
    }

<%_ if (authenticationType == 'oauth2') { _%>
    public User syncUserWithIdP(User user) {
        // save authorities in to sync user roles/groups between IdP and JHipster's local database
        Collection<String> dbAuthorities = getAuthorities();
        Collection<String> userAuthorities =
            user.getAuthorities().stream().map(Authority::getName).collect(Collectors.toList());
        for (String authority : userAuthorities) {
            if (!dbAuthorities.contains(authority)) {
                log.debug("Saving authority '{}' in local database", authority);
                Authority authorityToSave = new Authority();
                authorityToSave.setName(authority);
                authorityRepository.save(authorityToSave);
            }
        }
        // save account in to sync users between IdP and JHipster's local database
        Optional<User> existingUser = userRepository.findOneByLogin(user.getLogin());
        if (existingUser.isPresent()) {

            log.debug("Updating user '{}' in local database", user.getLogin());
            updateUser(user.getFirstName(), user.getLastName(), user.getEmail(),
                user.getLangKey(), user.getImageUrl());

        } else {
            log.debug("Saving user '{}' in local database", user.getLogin());
            userRepository.save(user);
            <%_ if (usesCache) { _%>
            this.clearUserCaches(user);
            <%_ } _%>
        }
        return user;
    }
<%_ } _%>
<%_ if (authenticationType !== 'oauth2') { _%>

    public Optional<User> activateRegistration(String key) {
        log.debug("Activating user for activation key {}", key);
        return userRepository.findOneByActivationKey(key)
            .map(user -> {
                // activate given user for the registration key.
                user.setActivated(true);
                user.setActivationKey(key);
                <%_ if (usesCache) { _%>
                this.clearUserCaches(user);
                <%_ } _%>
                log.debug("Activated user: {}", user);
                return user;
            });
    }

    public Optional<User> completePasswordReset(String newPassword, String key) {
        log.debug("Reset user password for reset key {}", key);
        return userRepository.findOneByResetKey(key)
            .filter(user -> user.getResetDate().isAfter(Instant.now().minusSeconds(86400)))
            .map(user -> {
                user.setPassword(passwordEncoder.encode(newPassword));
                user.setResetKey(null);
                user.setResetDate(null);
                <%_ if (usesCache) { _%>
                this.clearUserCaches(user);
                <%_ } _%>
                return user;
            });
    }

    public Optional<User> requestPasswordReset(String mail) {
        return userRepository.findOneByEmailIgnoreCase(mail)
            .filter(User::getActivated)
            .map(user -> {
                user.setResetKey(RandomUtil.generateResetKey());
                user.setResetDate(Instant.now());
                <%_ if (usesCache) { _%>
                this.clearUserCaches(user);
                <%_ } _%>
                return user;
            });
    }

    public User registerUser(<%= user.adminUserDto %> userDTO, String password) {
        userRepository.findOneByLogin(userDTO.getLogin().toLowerCase()).ifPresent(existingUser -> {
            boolean removed = removeNonActivatedUser(existingUser);
            if (!removed) {
                throw new LoginAlreadyUsedException();
            }
        });
        userRepository.findOneByEmailIgnoreCase(userDTO.getEmail()).ifPresent(existingUser -> {
            boolean removed = removeNonActivatedUser(existingUser);
            if (!removed) {
                throw new EmailAlreadyUsedException();
            }
        });
        User newUser = new User();
        String encryptedPassword = passwordEncoder.encode(password);
        newUser.setLogin(userDTO.getLogin().toLowerCase());
        // new user gets initially a generated password
        newUser.setPassword(encryptedPassword);
        newUser.setFirstName(userDTO.getFirstName());
        newUser.setLastName(userDTO.getLastName());
        newUser.setEmail(userDTO.getEmail().toLowerCase());
        newUser.setImageUrl(userDTO.getImageUrl());
        newUser.setLangKey(userDTO.getLangKey());
        // new user is not active
        newUser.setActivated(false);
        // new user gets registration key
        newUser.setActivationKey(RandomUtil.generateActivationKey());
        Set<Authority> authorities = new HashSet<>();
        authorityRepository.findById(AuthoritiesConstants.USER).ifPresent(authorities::add);
        newUser.setAuthorities(authorities);
        userRepository.save(newUser);
        <%_ if (usesCache) { _%>
        this.clearUserCaches(newUser);
        <%_ } _%>
        log.debug("Created Information for User: {}", newUser);
        return newUser;
    }

    private boolean removeNonActivatedUser(User existingUser){
        if (existingUser.getActivated()) {
             return false;
        }
        userRepository.delete(existingUser);
        userRepository.flush();
        <%_ if (usesCache) { _%>
        this.clearUserCaches(existingUser);
        <%_ } _%>
        return true;
    }

    public User createUser(<%= user.adminUserDto %> userDTO) {
        User user = new User();
        user.setLogin(userDTO.getLogin().toLowerCase());
        user.setFirstName(userDTO.getFirstName());
        user.setLastName(userDTO.getLastName());
        user.setEmail(userDTO.getEmail().toLowerCase());
        user.setImageUrl(userDTO.getImageUrl());
        if (userDTO.getLangKey() == null) {
            user.setLangKey(Constants.DEFAULT_LANGUAGE); // default language
        } else {
            user.setLangKey(userDTO.getLangKey());
        }
        String encryptedPassword = passwordEncoder.encode(RandomUtil.generatePassword());
        user.setPassword(encryptedPassword);
        user.setResetKey(RandomUtil.generateResetKey());
        user.setResetDate(Instant.now());
        user.setActivated(true);
        if (userDTO.getAuthorities() != null) {
            Set<Authority> authorities = userDTO.getAuthorities().stream()
                .map(authorityRepository::findById)
                .filter(Optional::isPresent)
                .map(Optional::get)
                .collect(Collectors.toSet());
            user.setAuthorities(authorities);
        }
        userRepository.save(user);
        <%_ if (usesCache) { _%>
        this.clearUserCaches(user);
        <%_ } _%>
        log.debug("Created Information for User: {}", user);
        return user;
    }

    /**
     * Update all information for a specific user, and return the modified user.
     *
     * @param userDTO user to update.
     * @return updated user.
     */
    public Optional<<%= user.adminUserDto %>> updateUser(<%= user.adminUserDto %> userDTO) {
        return Optional.of(userRepository
            .findById(userDTO.getId()))
            .filter(Optional::isPresent)
            .map(Optional::get)
            .map(user -> {
                <%_ if (usesCache) { _%>
                this.clearUserCaches(user);
                <%_ } _%>
                user.setLogin(userDTO.getLogin().toLowerCase());
                user.setFirstName(userDTO.getFirstName());
                user.setLastName(userDTO.getLastName());
                user.setEmail(userDTO.getEmail().toLowerCase());
                user.setImageUrl(userDTO.getImageUrl());
                user.setActivated(userDTO.isActivated());
                user.setLangKey(userDTO.getLangKey());
                Set<Authority> managedAuthorities = user.getAuthorities();
                managedAuthorities.clear();
                userDTO.getAuthorities().stream()
                    .map(authorityRepository::findById)
                    .filter(Optional::isPresent)
                    .map(Optional::get)
                    .forEach(managedAuthorities::add);
                user = userRepository.save(user);
                <%_ if (usesCache) { _%>
                this.clearUserCaches(user);
                <%_ } _%>
                log.debug("Changed Information for User: {}", user);
                return user;
            })
            .map(<%= user.adminUserDto %>::new);
    }

    public void deleteUser(String login) {
        userRepository.findOneByLogin(login).ifPresent(user -> {
            userRepository.delete(user);
            <%_ if (usesCache) { _%>
            this.clearUserCaches(user);
            <%_ } _%>
            log.debug("Deleted User: {}", user);
        });
    }

    public void changePassword(String currentClearTextPassword, String newPassword) {
        SecurityUtils.getCurrentUserLogin()
            .flatMap(userRepository::findOneByLogin)
            .ifPresent(user -> {
                String currentEncryptedPassword = user.getPassword();
                if (!passwordEncoder.matches(currentClearTextPassword, currentEncryptedPassword)) {
                    throw new InvalidPasswordException();
                }
                String encryptedPassword = passwordEncoder.encode(newPassword);
                user.setPassword(encryptedPassword);
                user = userRepository.update(user);
                <%_ if (usesCache) { _%>
                this.clearUserCaches(user);
                <%_ } _%>
                log.debug("Changed password for User: {}", user);
            });
    }
<%_ } // authenticationType !== 'oauth2' _%>

    /**
     * Update basic information (first name, last name, email, language) for the current user.
     *
     * @param firstName first name of user.
     * @param lastName  last name of user.
     * @param email     email id of user.
     * @param langKey   language key.
     * @param imageUrl  image URL of user.
     */
    public void updateUser(String firstName, String lastName, String email, String langKey, String imageUrl) {
        SecurityUtils.getCurrentUserLogin()
            .flatMap(userRepository::findOneByLogin)
            .ifPresent(user -> {
                user.setFirstName(firstName);
                user.setLastName(lastName);
                user.setEmail(email.toLowerCase());
                user.setLangKey(langKey);
                user.setImageUrl(imageUrl);
                user = userRepository.update(user);
                <%_ if (usesCache) { _%>
                this.clearUserCaches(user);
                <%_ } _%>
                log.debug("Changed Information for User: {}", user);
            });
    }

    @ReadOnly
    public Page<<%= user.adminUserDto %>> getAllManagedUsers(Pageable pageable) {
        Page<User> userPage = userRepository.findByLoginNotEqual(Constants.ANONYMOUS_USER, pageable);
        return Page.of(userPage.getContent().stream().map(<%= user.adminUserDto %>::new).collect(Collectors.toList()), pageable, userPage.getTotalSize());
    }

    @ReadOnly
    public Page<<%= user.dtoClass %>> getAllPublicUsers(Pageable pageable) {
        Page<User> userPage = userRepository.findByLoginNotEqual(Constants.ANONYMOUS_USER, pageable);
        return Page.of(userPage.getContent().stream().map(<%= user.dtoClass %>::new).collect(Collectors.toList()), pageable, userPage.getTotalSize());
    }

    @ReadOnly
    public Optional<User> getUserWithAuthoritiesByLogin(String login) {
        return userRepository.findOneByLogin(login);
    }

    @ReadOnly
    public Optional<User> getUserWithAuthorities(<% if (authenticationType !== 'oauth2') { %>Long<% } else { %>String<% } %> id) {
        return userRepository.findOneById(id);
    }

    @ReadOnly
    public Optional<User> getUserWithAuthorities() {
        return SecurityUtils.getCurrentUserLogin().flatMap(userRepository::findOneByLogin);
    }

    <%_ if (authenticationType !== 'oauth2') { _%>
    /**
     * Not activated users should be automatically deleted after 3 days.
     * <p>
     * This is scheduled to get fired everyday, at 01:00 (am).
     */
    @Scheduled(cron = "0 0 1 * * ?")
    public void removeNotActivatedUsers() {
        userRepository
            .findAllByActivatedFalseAndCreatedDateBefore(Instant.now().minus(3, ChronoUnit.DAYS))
            .forEach(user -> {
                log.debug("Deleting not activated user {}", user.getLogin());
                userRepository.delete(user);
                <%_ if (usesCache) { _%>
                this.clearUserCaches(user);
                <%_ } _%>
            });
    }
    <%_ } _%>

    /**
     * Gets a list of all the authorities.
     * @return a list of all the authorities.
     */
    public List<String> getAuthorities() {
        return authorityRepository.findAll().stream()
            .map(Authority::getName).collect(Collectors.toList());
    }
    <%_ if (usesCache) { _%>

    private void clearUserCaches(User user) {
        Objects.requireNonNull(cacheManager.getCache(UserRepository.USERS_CACHE)).invalidate(user.getLogin());
        Objects.requireNonNull(cacheManager.getCache(UserRepository.USERS_CACHE)).invalidate(user.getEmail());
        Objects.requireNonNull(cacheManager.getCache(UserRepository.USERS_CACHE)).invalidate(new ParametersKey(user.getLogin(), user.getEmail()));
    }
    <%_ } _%>

    public Optional<String> getCurrentUserLogin() {
        return SecurityUtils.getCurrentUserLogin();
    }
}
