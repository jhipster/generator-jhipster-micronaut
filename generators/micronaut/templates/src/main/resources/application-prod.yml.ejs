# ===================================================================
# Micronaut configuration for the "prod" environment.
#
# This configuration overrides the application.yml file.
#
# Full Micronaut configuration reference is available at:
# https://docs.micronaut.io/latest/guide/configurationreference.html
#
# More information on JHipster configuration properties:
# https://www.jhipster.tech/common-application-properties/
# ===================================================================
<%_
const { sqlDb } = MN_CONSTANTS;
const dbInfo = sqlDb[prodDatabaseType];
_%>
logger:
  levels:
    ROOT: INFO
    <%=packageName%>: INFO
    io.github.jhipster: INFO
<%_ if (serviceDiscoveryType === 'eureka') { _%>

eureka:
  client:
    registration:
      prefer-ip-address: true
    defaultZone: http://admin:${jhipster.registry.password}@localhost:8761/eureka/
<%_ } _%>

management:
  metrics:
    export:
      prometheus:
        enabled: false

<%_ if (databaseTypeSql) { _%>
<%_
    const dbUrlConfig = {
      databaseName: baseName,
      hostname: 'localhost'
    };

    let dbUser = 'root';
    let dbPass = '';

    if (prodDatabaseType === 'postgresql') {
      dbUser = baseName;
    }
    if (prodDatabaseType === 'mariadb') {
        dbPass = 'password';
    }

_%>
datasources:
  default:
    type: com.zaxxer.hikari.HikariDataSource
    url: ${JDBC_URL:`<%-prodJdbcUrl%>`}
    username: "<%=dbUser%>"
    password: "<%=dbPass%>"
    driverClassName: "<%=dbInfo.driver%>"
    autoCommit: false
    hikari:
      poolName: Hikari
      maximum-pool-size: 10
      data-source-properties:
        cachePrepStmts: true
        prepStmtCacheSize: 250
        prepStmtCacheSqlLimit: 2048
        useServerPrepStmts: true
<%_ } _%>
---
jpa:
  default:
    properties:
      hibernate:
<%_ if (['ehcache', 'caffeine', 'hazelcast', 'infinispan', 'memcached', 'redis'].includes(cacheProvider)) { _%>
        javax.cache.missing_cache_strategy: create
<%_ } _%>
        id.new_generator_mappings: true
        connection:
          provider_disables_autocommit: true
          autocommit: false
        cache:
          use_query_cache: false
<%_ if (enableHibernateCache) { _%>
          use_second_level_cache: true
<%_ } else { _%>
          use_second_level_cache: false
<%_ } _%>
        generate_statistics: false
        show-sql: false


# Replace by 'prod, faker' to add the faker context and have sample data loaded in production
liquibase:
  datasources:
    default:
      async: true
      change-log: classpath:config/liquibase/master.xml
      contexts: prod
mail:
  host: localhost
  port: 25
  # username:
  # password:
thymeleaf:
  cache: true

# ===================================================================
# To enable TLS in production, generate a certificate using:
# keytool -genkey -alias <%= lowercaseBaseName %> -storetype PKCS12 -keyalg RSA -keysize 2048 -keystore keystore.p12 -validity 3650
#
# You can also use Let's Encrypt:
# https://maximilian-boehm.com/hp2121/Create-a-Java-Keystore-JKS-from-Let-s-Encrypt-Certificates.htm
#
# Then, modify the micronaut.server.ssl properties so your "server" configuration looks like:
#
# micronaut:
#   server:
#     ssl:
#       port: 443
#       key-store:
#         path: classpath:config/tls/keystore.p12
#         password: password
#         type: PKCS12
#       key:
#         alias: <%= lowercaseBaseName %>
#          # The ciphers suite enforce the security by deactivating some old and deprecated SSL cipher, this list was tested against SSL Labs (https://www.ssllabs.com/ssltest/)
#       ciphers: TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 ,TLS_DHE_RSA_WITH_AES_128_GCM_SHA256 ,TLS_DHE_RSA_WITH_AES_256_GCM_SHA384 ,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384,TLS_DHE_RSA_WITH_AES_128_CBC_SHA256,TLS_DHE_RSA_WITH_AES_128_CBC_SHA,TLS_DHE_RSA_WITH_AES_256_CBC_SHA256,TLS_DHE_RSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_CBC_SHA256,TLS_RSA_WITH_AES_256_CBC_SHA256,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA,TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA,TLS_RSA_WITH_CAMELLIA_256_CBC_SHA,TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA,TLS_RSA_WITH_CAMELLIA_128_CBC_SHA
# ===================================================================
micronaut:
  server:
    port: 8080
  security:
    token:
      jwt:
        generator:
          access-token:
            expiration: 86400
        signatures:
          secret:
            generator:
              # As this is the PRODUCTION configuration, you must securely supply the application with a secret.
              secret: ${jhipster.security.authentication.jwt.base64-secret:<%= jwtSecretKey %>}
              base64: true
              jws-algorithm: HS512

# ===================================================================
# JHipster specific properties
#
# Full reference is available at: https://www.jhipster.tech/common-application-properties/
# ===================================================================

jhipster:
  http:
    cache: # Used by the CachingHttpHeadersFilter
      timeToLiveInDays: 1461
<%_ if (['ehcache', 'caffeine', 'hazelcast', 'infinispan', 'memcached', 'redis'].includes(cacheProvider)) { _%>
  cache: # Cache configuration
  <%_ if (cacheProvider === 'ehcache') { _%>
    ehcache: # Ehcache configuration
      time-to-live-seconds: 3600 # By default objects stay 1 hour in the cache
      max-entries: 1000 # Number of objects in each cache entry
  <%_ } _%>
  <%_ if (cacheProvider === 'caffeine') { _%>
    caffeine: # Caffeine configuration
        time-to-live-seconds: 3600 # By default objects stay 1 hour in the cache. This sets expireAfterWrite in Caffeine (https://github.com/ben-manes/caffeine/wiki/Eviction#time-based)
        max-entries: 1000 # Number of objects in each cache entry
    <%_ } _%>
    <%_ if (cacheProvider === 'redis') { _%>
      redis: # Redis configuration
          expiration: 3600 # By default objects stay 1 hour (in seconds) in the cache
          server: redis://localhost:6379
          cluster: false
          # server: redis://localhost:6379,redis://localhost:16379,redis://localhost:26379
          # cluster: true
      <%_ } _%>
<%_ } _%>
  mail: # specific JHipster mail property, for standard properties see MailProperties
    from: <%= baseName %>@localhost
    base-url: http://my-server-url-to-change # Modify according to your server's URL
  logging:
    use-json-format: false # By default, logs are not in Json format
    logstash: # Forward logs to logstash over a socket, used by LoggingConfiguration
      enabled: false
      host: localhost
      port: 5000
      queue-size: 512
# ===================================================================
# Application specific properties
# Add your own application properties here, see the ApplicationProperties class
# to have type-safe configuration, like in the JHipsterProperties above
#
# More documentation is available at:
# https://www.jhipster.tech/common-application-properties/
# ===================================================================

# application:
