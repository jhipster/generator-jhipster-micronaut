<%#
 Copyright 2019-2021 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
<%_
    const instanceType = (dto === 'mapstruct') ? asDto(entityClass) : asEntity(entityClass);
    const instanceName = (dto === 'mapstruct') ? asDto(entityInstance) : asEntity(entityInstance);
    const mapper = entityInstance + 'Mapper';
    const entityListToDtoListReference = mapper + '.' + 'toDto';
    const entityToDtoReference = mapper + '::'+ 'toDto';
_%>
<%_ if (jpaMetamodelFiltering) { _%>
    public HttpResponse<List<<%= instanceType %>>> getAll<%= entityClassPlural %>(<%= entityClass %>Criteria criteria<% if (pagination != 'no') { %>, Pageable pageable<% if (reactive) { %>, HttpRequest request<% } %><% } %>) {
        log.debug("REST request to get <%= entityClassPlural %> by criteria: {}", criteria);
    <%_ if (pagination === 'no') { _%>
        List<<%= instanceType %>> entityList = <%= entityInstance %>QueryService.findByCriteria(criteria);
        return HttpResponse.ok().body(entityList);
    <%_ } else { _%>
        Page<<%= instanceType %>> page = <%= entityInstance %>QueryService.findByCriteria(criteria, pageable);
        return HttpResponse.ok(page.getContent()).headers(headers ->
            PaginationUtil.generatePaginationHttpHeaders(<% if (!reactive) { %>headers, UriBuilder.of(request.getPath())<% } else { %>UriComponentsBuilder.fromHttpRequest(request)<% } %>, page));
    <%_ } _%>
    }

    /**
     * {@code GET  /<%= entityApiUrl %>/count} : count all the <%= entityInstancePlural %>.
     *
     * @param criteria the criteria which the requested entities should match.
     * @return the {@link HttpResponse} with status {@code 200 (OK)} and the count in body.
     */
    @Get("/<%= entityApiUrl %>/count")
    public HttpResponse<Long> count<%= entityClassPlural %>(<%= entityClass %>Criteria criteria) {
        log.debug("REST request to count <%= entityClassPlural %> by criteria: {}", criteria);
        return HttpResponse.ok().body(<%= entityInstance %>QueryService.countByCriteria(criteria));
    }
<%_ } else { _%>
    <%_ if (pagination === 'no') { _%>
    public Iterable<<%= instanceType %>> getAll<%= entityClassPlural %>(HttpRequest request<% if (fieldsContainNoOwnerOneToOne) { %>, @Nullable String filter<% } %><% if (fieldsContainOwnerManyToMany && fieldsContainNoOwnerOneToOne) { %>,<% } %><% if (fieldsContainOwnerManyToMany) { %>, @Nullable boolean eagerload<% } %>) {<%- include('get_all_stream_template', {viaService: viaService}); -%>
        log.debug("REST request to get all <%= entityClassPlural %>");<% if (viaService) { %>
        return <%= entityInstance %>Service.findAll();<% } else if (dto === 'mapstruct') { %>
        List<<%= asEntity(entityClass) %>> <%= entityInstancePlural %> = <%= entityInstance %>Repository.<% if (fieldsContainOwnerManyToMany) { %>findAllWithEagerRelationships<% } else { %>findAll<% } %>();
        return <%= entityListToDtoListReference %>(<%= entityInstancePlural %>);<% } else { %>
        return <%= entityInstance %>Repository.<% if (fieldsContainOwnerManyToMany) { %>findAllWithEagerRelationships<% } else { %>findAll<% } %>();<% } %>
    <%_ } if (pagination !== 'no') { _%>
    public HttpResponse<List<<%= instanceType %>>> getAll<%= entityClassPlural %>(HttpRequest request, Pageable pageable<% if (fieldsContainNoOwnerOneToOne) { %>, @Nullable String filter<% } %><% if (fieldsContainOwnerManyToMany) { %>, @Nullable Boolean eagerload<% } %>) {<%- include('get_all_stream_template', {viaService: viaService}); -%>
        log.debug("REST request to get a page of <%= entityClassPlural %>");
    <%_ if (viaService) { _%>
        <%_ if (fieldsContainOwnerManyToMany) { _%>
        Page<<%= instanceType %>> page;
        if (eagerload != null && eagerload) {
            page = <%= entityInstance %>Service.findAllWithEagerRelationships(pageable);
        } else {
            page = <%= entityInstance %>Service.findAll(pageable);
        }
        <%_ } else { _%>
        Page<<%= instanceType %>> page = <%= entityInstance %>Service.findAll(pageable);
        <%_ } _%>
    <%_ } else { _%>
        <%_ if (fieldsContainOwnerManyToMany) { _%>
        Page<<%= instanceType %>> page;
        if (eagerload != null && eagerload) {
            page = <%= entityInstance %>Repository.findAllWithEagerRelationships(pageable)<% if (dto === 'mapstruct') { %>.map(<%= entityToDtoReference %>)<% } %>;
        } else {
            page = <%= entityInstance %>Repository.findAll(pageable)<% if (dto !== 'mapstruct') { %>;<% } else { %>.map(<%= entityToDtoReference %>);<% } %>
        }
        <%_ } else { _%>
        Page<<%= instanceType %>> page = <%= entityInstance %>Repository.findAll(pageable)<% if (dto !== 'mapstruct') { %>;<% } else { %>.map(<%= entityToDtoReference %>);<% } %>
        <%_ } _%>
    <%_ } _%>
        return HttpResponse.ok(page.getContent()).headers(headers ->
            PaginationUtil.generatePaginationHttpHeaders(<% if (!reactive) { %>headers, UriBuilder.of(request.getPath())<% } else { %>UriComponentsBuilder.fromHttpRequest(request)<% } %>, page));
    <%_ } _%>
    }
<%_ } _%>
