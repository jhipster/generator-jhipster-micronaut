<%#
 Copyright 2013-2020 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%= packageName %>.web.rest;

<%_
let isUsingMapsId = false;
let mapsIdAssoc;
let mapsIdEntity;
let mapsIdEntityInstance;
let mapsIdRepoInstance;
let hasOauthUser = false;
for (idx in relationships) {
    isUsingMapsId = relationships[idx].useJPADerivedIdentifier;
    if ( isUsingMapsId === true) {
        mapsIdAssoc = relationships[idx];
        mapsIdEntity = mapsIdAssoc.otherEntityNameCapitalized;
        mapsIdEntityInstance =  mapsIdEntity.charAt(0).toLowerCase() + mapsIdEntity.slice(1);
        mapsIdRepoInstance = `${mapsIdEntityInstance}Repository`;
        hasOauthUser = relationships[idx].otherEntityName === 'user' && authenticationType === 'oauth2';
        break;
    }
}

const usesDto = dto === 'mapstruct';
const httpEntityClass = usesDto ? asDto(entityClass) : entityClass;
const httpEntityInstance = usesDto ? asDto(entityInstance) : entityInstance;

_%>
<%_ if (databaseType === 'cassandra') { _%>
import <%= packageName %>.AbstractCassandraTest;
<%_ } _%>
<%_ if (cacheProvider === 'redis') { _%>
import <%= packageName %>.RedisTestContainerExtension;
<%_ } _%>

<%_ if (authenticationType === 'uaa') { _%>
import <%= packageName %>.config.SecurityBeanOverrideConfiguration;
<%_ } _%>
import <%= packageName %>.domain.<%= asEntity(entityClass) %>;
<%_
    var imported = [];
    for (idx in relationships) { // import entities in required relationships
        const relationshipValidate = relationships[idx].relationshipValidate;
        const otherEntityNameCapitalized = relationships[idx].otherEntityNameCapitalized;
        const isUsingMapsIdL1 = relationships[idx].useJPADerivedIdentifier;
        if (imported.indexOf(otherEntityNameCapitalized) === -1) {
            if ((relationshipValidate !== null && relationshipValidate === true) || jpaMetamodelFiltering || (isUsingMapsIdL1 === true)) { _%>
import <%= packageName %>.domain.<%= asEntity(otherEntityNameCapitalized) %>;
<%_         imported.push(otherEntityNameCapitalized);
        } } } _%>
<%_ if (saveUserSnapshot) { _%>
import <%= packageName %>.repository.UserRepository;
<%_ } _%>
import <%= packageName %>.repository.<%= entityClass %>Repository;

import io.micronaut.context.annotation.Property;
import io.micronaut.core.type.Argument;
import io.micronaut.http.HttpRequest;
import io.micronaut.http.HttpResponse;
import io.micronaut.http.HttpStatus;
import io.micronaut.http.client.RxHttpClient;
import io.micronaut.http.client.annotation.Client;
import io.micronaut.http.client.exceptions.HttpClientResponseException;
import io.micronaut.test.extensions.junit5.annotation.MicronautTest;
<%_ if (databaseType === 'sql') { _%>
import io.micronaut.transaction.SynchronousTransactionManager;
import io.micronaut.transaction.TransactionOperations;
<%_ } _%>

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestInstance;
<%_ if (cacheProvider === 'redis') { _%>
import org.junit.jupiter.api.extension.ExtendWith;
<%_ } _%>

import javax.inject.Inject;
<%_ if (databaseType === 'sql' && !reactive) { _%>
import javax.persistence.EntityManager;
<%_ } _%>
<% if (fieldsContainBigDecimal === true) { %>
import java.math.BigDecimal;<% } %><% if (fieldsContainBlob === true && databaseType === 'cassandra') { %>
import java.nio.ByteBuffer;<% } %><% if (reactiveRepositories || fieldsContainDuration === true) { %>
import java.time.Duration;<% } %><% if (fieldsContainLocalDate === true) { %>
import java.time.LocalDate;<% } %><% if (fieldsContainInstant === true || fieldsContainZonedDateTime === true) { %>
import java.time.Instant;<% } %><% if (fieldsContainZonedDateTime === true) { %>
import java.time.ZonedDateTime;
import java.time.ZoneOffset;<% } %><% if (fieldsContainLocalDate === true || fieldsContainZonedDateTime === true) { %>
import java.time.ZoneId;<% } %><% if (fieldsContainInstant === true) { %>
import java.time.temporal.ChronoUnit;<% } %>
<%_ if (searchEngine === 'elasticsearch') { _%>
import java.util.Collections;
<%_ } _%>
<%_ if (databaseType === 'sql') { _%>
import java.sql.Connection;
<%_ } _%>
import java.util.List;
<%_ if (databaseType === 'cassandra' || fieldsContainUUID === true || (databaseType === 'sql' && hasOauthUser === true)) { _%>
import java.util.UUID;
<%_ } _%>

<%_ if (usesDto) { _%>
import <%= packageName %>.service.dto.<%= asDto(entityClass) %>;
import <%= packageName %>.service.mapper.<%= entityClass %>Mapper;
<%_ } _%>

import static org.assertj.core.api.Assertions.assertThat;

<%_ if (databaseType === 'couchbase') { _%>
    import static <%= packageName %>.web.rest.TestUtil.mockAuthentication;
<%_ } _%>

<%_ for (idx in fields) { if (fields[idx].fieldIsEnum === true) { _%>import <%= packageName %>.domain.enumeration.<%= fields[idx].fieldType %>;
<%_ } } _%>
/**
 * Integration tests for the {@Link <%= entityClass %>Resource} REST controller.
 */
<%_ if (cacheProvider === 'redis') { _%>
@ExtendWith(RedisTestContainerExtension.class)
<%_ } _%>
@MicronautTest(transactional = false)
@Property(name = "micronaut.security.enabled", value = "false")
@TestInstance(TestInstance.Lifecycle.PER_CLASS)
public class <%= entityClass %>ResourceIT <% if (databaseType === 'cassandra') { %>extends AbstractCassandraTest <% } %>{
    <%_ for (idx in fields) {
    const defaultValueName = 'DEFAULT_' + fields[idx].fieldNameUnderscored.toUpperCase();
    const updatedValueName = 'UPDATED_' + fields[idx].fieldNameUnderscored.toUpperCase();
    const smallerValueName = 'SMALLER_' + fields[idx].fieldNameUnderscored.toUpperCase();
    const needsSmallerValueName = jpaMetamodelFiltering && isFilterableType(fields[idx].fieldType)
            && ['BigDecimal', 'Byte', 'Double', 'Duration', 'Float', 'Short', 'Integer', 'Long', 'LocalDate', 'ZonedDateTime'].includes(fields[idx].fieldType);

    let defaultValue = 1;
    let updatedValue = 2;

    if (fields[idx].fieldValidate === true) {
        if (fields[idx].fieldValidateRules.includes('max')) {
            defaultValue = fields[idx].fieldValidateRulesMax;
            updatedValue = parseInt(fields[idx].fieldValidateRulesMax) - 1;
        }
        if (fields[idx].fieldValidateRules.includes('min')) {
            defaultValue = fields[idx].fieldValidateRulesMin;
            updatedValue = parseInt(fields[idx].fieldValidateRulesMin) + 1;
        }
        if (fields[idx].fieldValidateRules.includes('minbytes')) {
            defaultValue = fields[idx].fieldValidateRulesMinbytes;
            updatedValue = fields[idx].fieldValidateRulesMinbytes;
        }
        if (fields[idx].fieldValidateRules.includes('maxbytes')) {
            updatedValue = fields[idx].fieldValidateRulesMaxbytes;
        }
    }

    const fieldType = fields[idx].fieldType;
    const fieldTypeBlobContent = fields[idx].fieldTypeBlobContent;
    const isEnum = fields[idx].fieldIsEnum;
    let enumValue1;
    let enumValue2;
    if (isEnum) {
        const values = fields[idx].fieldValues.replace(/\s/g, '').split(',');
        enumValue1 = values[0];
        if (values.length > 1) {
            enumValue2 = values[1];
        } else {
            enumValue2 = enumValue1;
        }
    }

    if (fieldType === 'String' || fieldTypeBlobContent === 'text') {
        // Generate Strings, using the min and max string length if they are configured
        let sampleTextString = "";
        let updatedTextString = "";
        let sampleTextLength = 10;
        if (fields[idx].fieldValidateRulesMinlength > sampleTextLength) {
            sampleTextLength = fields[idx].fieldValidateRulesMinlength;
        }
        if (fields[idx].fieldValidateRulesMaxlength < sampleTextLength) {
            sampleTextLength = fields[idx].fieldValidateRulesMaxlength;
        }
        for (let i = 0; i < sampleTextLength; i++) {
            sampleTextString += "A";
            updatedTextString += "B";
        }
        if (!this._.isUndefined(fields[idx].fieldValidateRulesPattern)) {
            // Generate Strings, using pattern
            try {
                const patternRegExp = new RegExp(fields[idx].fieldValidateRulesPattern);
                const randExp = new this.randexp(fields[idx].fieldValidateRulesPattern);
                // set infinite repetitions max range
                if (!patternRegExp.test(sampleTextString.replace(/\\"/g, '"').replace(/\\\\/g, '\\'))) {
                    sampleTextString = randExp.gen().replace(/\\/g, '\\\\').replace(/"/g, '\\"');
                }
                if (!patternRegExp.test(updatedTextString.replace(/\\"/g, '"').replace(/\\\\/g, '\\'))) {
                    updatedTextString = randExp.gen().replace(/\\/g, '\\\\').replace(/"/g, '\\"');
                }
            } catch (error) {
                log(this.chalkRed('Error generating test value for entity "' + entityClass +
                    '" field "' + fields[idx].fieldName + '" with pattern "' + fields[idx].fieldValidateRulesPattern +
                    '", generating default values for this field. Detailed error message: "' + error.message + '".'));
            }
            if (sampleTextString === updatedTextString) {
                updatedTextString = updatedTextString + "B";
                log(this.chalkRed('Randomly generated first and second test values for entity "' + entityClass +
                    '" field "' + fields[idx].fieldName + '" with pattern "' + fields[idx].fieldValidateRulesPattern +
                    '" in file "' + entityClass + 'ResourceIT" where equal, added symbol "B" to second value.'));
            }
        } _%>

    private static final String <%= defaultValueName %> = "<%- sampleTextString %>";
    private static final String <%= updatedValueName %> = "<%- updatedTextString %>";
    <%_ } else if (fieldType === 'Integer') { _%>

    private static final Integer <%= defaultValueName %> = <%= defaultValue %>;
    private static final Integer <%= updatedValueName %> = <%= updatedValue %>;
        <%_ if (needsSmallerValueName) { _%>
    private static final Integer <%= smallerValueName %> = <%= defaultValue %> - 1;
        <%_ } _%>
    <%_ } else if (fieldType === 'Long') { _%>

    private static final Long <%= defaultValueName %> = <%= defaultValue %>L;
    private static final Long <%= updatedValueName %> = <%= updatedValue %>L;
        <%_ if (needsSmallerValueName) { _%>
    private static final Long <%= smallerValueName %> = <%= defaultValue %>L - 1L;
        <%_ } _%>
    <%_ } else if (fieldType === 'Float') { _%>

    private static final <%= fieldType %> <%= defaultValueName %> = <%= defaultValue %>F;
    private static final <%= fieldType %> <%= updatedValueName %> = <%= updatedValue %>F;
        <%_ if (needsSmallerValueName) { _%>
    private static final <%= fieldType %> <%= smallerValueName %> = <%= defaultValue %>F - 1F;
        <%_ } _%>
    <%_ } else if (fieldType === 'Double') { _%>

    private static final <%= fieldType %> <%= defaultValueName %> = <%= defaultValue %>D;
    private static final <%= fieldType %> <%= updatedValueName %> = <%= updatedValue %>D;
        <%_ if (needsSmallerValueName) { _%>
    private static final <%= fieldType %> <%= smallerValueName %> = <%= defaultValue %>D - 1D;
        <%_ } _%>
    <%_ } else if (fieldType === 'BigDecimal') { _%>

    private static final BigDecimal <%= defaultValueName %> = new BigDecimal(<%= defaultValue %>);
    private static final BigDecimal <%= updatedValueName %> = new BigDecimal(<%= updatedValue %>);
        <%_ if (needsSmallerValueName) { _%>
    private static final BigDecimal <%= smallerValueName %> = new BigDecimal(<%= defaultValue %> - 1);
        <%_ } _%>
    <%_ } else if (fieldType === 'UUID') { _%>

    private static final UUID <%= defaultValueName %> = UUID.randomUUID();
    private static final UUID <%= updatedValueName %> = UUID.randomUUID();
    <%_ } else if (fieldType === 'LocalDate') { _%>

    private static final LocalDate <%= defaultValueName %> = LocalDate.ofEpochDay(0L);
    private static final LocalDate <%= updatedValueName %> = LocalDate.now(ZoneId.systemDefault());
        <%_ if (needsSmallerValueName) { _%>
    private static final LocalDate <%= smallerValueName %> = LocalDate.ofEpochDay(-1L);
        <%_ } _%>
    <%_ } else if (fieldType === 'Instant') { _%>

    private static final Instant <%= defaultValueName %> = Instant.ofEpochMilli(0L);
    private static final Instant <%= updatedValueName %> = Instant.now().truncatedTo(ChronoUnit.MILLIS);
        <%_ if (needsSmallerValueName) { _%>
    private static final Instant <%= smallerValueName %> = Instant.ofEpochMilli(-1L);
        <%_ } _%>
    <%_ } else if (fieldType === 'ZonedDateTime') { _%>

    private static final ZonedDateTime <%= defaultValueName %> = ZonedDateTime.ofInstant(Instant.ofEpochMilli(0L), ZoneOffset.UTC);
    private static final ZonedDateTime <%= updatedValueName %> = ZonedDateTime.now(ZoneId.systemDefault()).withNano(0);
        <%_ if (needsSmallerValueName) { _%>
    private static final ZonedDateTime <%= smallerValueName %> = ZonedDateTime.ofInstant(Instant.ofEpochMilli(-1L), ZoneOffset.UTC);
        <%_ } _%>
    <%_ } else if (fieldType === 'Duration') { _%>

    private static final Duration <%= defaultValueName %> = Duration.ofHours(6);
    private static final Duration <%= updatedValueName %> = Duration.ofHours(12);
        <%_ if (needsSmallerValueName) { _%>
    private static final Duration <%= smallerValueName %> = Duration.ofHours(5);
        <%_ } _%>
    <%_ } else if (fieldType === 'Boolean') { _%>

    private static final Boolean <%= defaultValueName %> = false;
    private static final Boolean <%= updatedValueName %> = true;
    <%_ } else if ((fieldType === 'byte[]' || fieldType === 'ByteBuffer') && fieldTypeBlobContent !== 'text') { _%>

    <%_ if (databaseType !== 'cassandra') { _%>
    private static final byte[] <%= defaultValueName %> = TestUtil.createByteArray(1, "0");
    private static final byte[] <%= updatedValueName %> = TestUtil.createByteArray(1, "1");
    <%_ } else { _%>
    private static final ByteBuffer <%= defaultValueName %> = ByteBuffer.wrap(TestUtil.createByteArray(1, "0"));
    private static final ByteBuffer <%= updatedValueName %> = ByteBuffer.wrap(TestUtil.createByteArray(1, "1"));
    <%_ } _%>
    private static final String <%= defaultValueName %>_CONTENT_TYPE = "image/jpg";
    private static final String <%= updatedValueName %>_CONTENT_TYPE = "image/png";
    <%_ } else if (isEnum) { _%>

    private static final <%= fieldType %> <%= defaultValueName %> = <%= fieldType %>.<%= enumValue1 %>;
    private static final <%= fieldType %> <%= updatedValueName %> = <%= fieldType %>.<%= enumValue2 %>;
    <%_ } } _%>

    <%_ if (usesDto) { _%>
    @Inject
    private <%= entityClass %>Mapper <%= entityInstance %>Mapper;
    <%_ } _%>
    @Inject
    private <%= entityClass %>Repository <%= entityInstance %>Repository;
    <%_ if (databaseType === 'sql') { _%>

    @Inject
    private EntityManager em;

    @Inject
    SynchronousTransactionManager<Connection> transactionManager;
    <%_ } _%>
    <%_ if (isUsingMapsId === true && ( dto !== 'mapstruct' && service === 'no')) { _%>
    @Inject
    private <%= mapsIdEntity %>Repository <%= mapsIdRepoInstance %>;
    <%_ } _%>
    <%_ if (saveUserSnapshot) { _%>

    @Inject
    private UserRepository userRepository;
    <%_ } _%>
    <%_ if (reactiveRepositories && service === 'no') { _%>

    @Inject
    private <%= entityClass %>ReactiveRepository <%= entityInstance %>ReactiveRepository;
    <%_ } _%>

    @Inject @Client("/")
    RxHttpClient client;

    private <%= asEntity(entityClass) %> <%= asEntity(entityInstance) %>;

    @BeforeEach
    public void initTest() {
        <%= asEntity(entityInstance) %> = createEntity(transactionManager, em);
    }

    @AfterEach
    public void cleanUpTest() {
        <%_ if (databaseType === 'sql' && !reactive) { _%>
        deleteAll(transactionManager, em);
        <%_ } else { _%>
        <%= asEntity(entityInstance) %>Repository.deleteAll();
        <%_ } _%>
    }

    /**
     * Create an entity for this test.
     *
     * This is a static method, as tests for other entities might also need it,
     * if they test an entity which requires the current entity.
     */
    public static <%= asEntity(entityClass) %> createEntity(<% if (databaseType === 'sql') { %>TransactionOperations<Connection> transactionManager, EntityManager em<% } %>) {
        <%_ if (fluentMethods) { _%>
        <%= asEntity(entityClass) %> <%= asEntity(entityInstance) %> = new <%= asEntity(entityClass) %>()<% for (idx in fields) { %>
            .<%= fields[idx].fieldName %>(<%= "DEFAULT_" + fields[idx].fieldNameUnderscored.toUpperCase() %>)<% if ((fields[idx].fieldType === 'byte[]' || fields[idx].fieldType === 'ByteBuffer') && fields[idx].fieldTypeBlobContent !== 'text') { %>
            .<%= fields[idx].fieldName %>ContentType(<%= "DEFAULT_" + fields[idx].fieldNameUnderscored.toUpperCase() %>_CONTENT_TYPE)<% } %><% } %>;
        <%_ } else { _%>
        <%= asEntity(entityClass) %> <%= asEntity(entityInstance) %> = new <%= asEntity(entityClass) %>();
            <%_ for (idx in fields) { _%>
        <%= asEntity(entityInstance) %>.set<%= fields[idx].fieldInJavaBeanMethod %>(<%= "DEFAULT_" + fields[idx].fieldNameUnderscored.toUpperCase() %>);
                <%_ if ((fields[idx].fieldType === 'byte[]' || fields[idx].fieldType === 'ByteBuffer') && fields[idx].fieldTypeBlobContent !== 'text') { _%>
        <%= asEntity(entityInstance) %>.set<%= fields[idx].fieldInJavaBeanMethod %>ContentType(<%= "DEFAULT_" + fields[idx].fieldNameUnderscored.toUpperCase() %>_CONTENT_TYPE);
                <%_ } _%>
            <%_ } _%>
        <%_ } _%>
        <%_
        const alreadyGeneratedEntities = []
        for (idx in relationships) {
            const relationshipValidate = relationships[idx].relationshipValidate;
            const otherEntityName = relationships[idx].otherEntityName;
            const otherEntityNameCapitalized = relationships[idx].otherEntityNameCapitalized;
            const relationshipType = relationships[idx].relationshipType;
            const relationshipNameCapitalizedPlural = relationships[idx].relationshipNameCapitalizedPlural;
            const relationshipNameCapitalized = relationships[idx].relationshipNameCapitalized;
            const mapsIdUse = relationships[idx].useJPADerivedIdentifier;
            if ((relationshipValidate !== null && relationshipValidate === true) || mapsIdUse === true) { _%>
        // Add required entity
            <%_ if (alreadyGeneratedEntities.indexOf(otherEntityName) == -1) { _%>
    <%_ if (otherEntityName === 'user') { // TODO or other entity has no unique fields _%>
        <%= asEntity(otherEntityNameCapitalized) %> <%= otherEntityName %> = <%= otherEntityNameCapitalized %>ResourceIT.createEntity(transactionManager);
                <%_ if (databaseType === 'sql' && !reactive) { _%>
        transactionManager.executeWrite(status -> {
                em.persist(<%= otherEntityName %>);
                em.flush();
                return <%= otherEntityName %>;
        });
                <%_ } _%>
                <%_ if (databaseType === 'mongodb') { _%>
        <%= otherEntityName %>.setId("fixed-id-for-tests");
                <%_ } _%>
    <%_ } else { _%>
        <%= asEntity(otherEntityNameCapitalized) %> <%= otherEntityName %>;
        <%_ if (databaseType === 'sql' && !reactive) { _%>
        if (TestUtil.findAll(transactionManager, em, <%= otherEntityNameCapitalized %>.class).isEmpty()) {
            <%= otherEntityName %> = <%= otherEntityNameCapitalized %>ResourceIT.createEntity(transactionManager, em);
            transactionManager.executeWrite(status -> {
                em.persist(<%= otherEntityName %>);
                em.flush();
                return <%= otherEntityName %>;
            });
        } else {
            <%= otherEntityName %> = TestUtil.findAll(transactionManager, em, <%= otherEntityNameCapitalized %>.class).get(0);
        }
        <%_ } else { _%>
        <%= otherEntityName %> = <%= otherEntityNameCapitalized %>ResourceIT.createEntity(<% if (databaseType === 'sql') { %>transactionManager, em<% } %>));
        <%_ } _%>
        <%_ if (databaseType === 'mongodb') { _%>
        <%= otherEntityName %>.setId("fixed-id-for-tests");
        <%_ } _%>
    <%_ } _%>
            <%_ } _%>
            <%_ if (relationshipType === 'many-to-many' || relationshipType === 'one-to-many') { _%>
        <%= asEntity(entityInstance) %>.get<%= relationshipNameCapitalizedPlural %>().add(<%= otherEntityName %>);
            <%_ } else { _%>
        <%= asEntity(entityInstance) %>.set<%= relationshipNameCapitalized %>(<%= otherEntityName %>);
            <%_ } _%>
        <%_ alreadyGeneratedEntities.push(otherEntityName) _%>
        <%_ } } _%>
        return <%= asEntity(entityInstance) %>;
    }
    <%_ if (databaseType === 'sql' && !reactive) { _%>

    /**
     * Delete all <%= asEntity(entityInstance) %> entities.
     *
     * This is a static method, as tests for other entities might also need it,
     * if they test an entity which requires the current entity.
     */
    public static void deleteAll(TransactionOperations<Connection> transactionManager, EntityManager em) {
        TestUtil.removeAll(transactionManager, em, <%= entityClass %>.class);
        <%_
            const alreadyDeletedEntities = []
            for (idx in relationships) {
                const relationshipValidate = relationships[idx].relationshipValidate;
                const otherEntityName = relationships[idx].otherEntityName;
                const otherEntityNameCapitalized = relationships[idx].otherEntityNameCapitalized;
                const mapsIdUse = relationships[idx].useJPADerivedIdentifier;
                if ((relationshipValidate !== null && relationshipValidate === true) || mapsIdUse === true) { _%>
        // Delete required entities
                <%_ if (alreadyDeletedEntities.indexOf(otherEntityName) == -1) { _%>
        <%= otherEntityNameCapitalized %>ResourceIT.deleteAll(transactionManager, em);
                <%_ } _%>
            <%_ } _%>
        <%_ } _%>
    }
    <%_ } _%>

<%_ if (!readOnly) { _%>

    @Test
    public void create<%= entityClass %>() throws Exception {
        int databaseSizeBeforeCreate = <%= entityInstance %>Repository.findAll().size();

        <%_ if (usesDto) { _%>
        <%= asDto(entityClass) %> <%= asDto(entityInstance) %> = <%= entityInstance %>Mapper.toDto(<%= asEntity(entityInstance) %>);
        <%_ } _%>

        // Create the <%= entityClass %>
        HttpResponse<<%= httpEntityClass %>> response = client.exchange(HttpRequest.POST("/api/<%= entityApiUrl %>", <%= httpEntityInstance %>), <%= httpEntityClass %>.class).blockingFirst();

        assertThat(response.status().getCode()).isEqualTo(HttpStatus.CREATED.getCode());

        // Validate the <%= entityClass %> in the database
        List<<%= asEntity(entityClass) %>> <%= entityInstance %>List = <%= entityInstance %>Repository.findAll();
        assertThat(<%= entityInstance %>List).hasSize(databaseSizeBeforeCreate + 1);
        <%= asEntity(entityClass) %> test<%= entityClass %> = <%= entityInstance %>List.get(<%= entityInstance %>List.size() - 1);
<%- include('../../common/validate_entity_fields_template', {isUpdate: false}); -%>
    }

    @Test
    public void create<%= entityClass %>WithExistingId() throws Exception {
        int databaseSizeBeforeCreate = <%= entityInstance %>Repository.findAll().size();

        // Create the <%= entityClass %> with an existing ID
        <%= asEntity(entityInstance) %>.setId(<% if (databaseType === 'sql' && hasOauthUser === true) { %>UUID.randomUUID().toString()<% } else if (databaseType === 'sql') { %>1L<% } else if (databaseType === 'mongodb' || databaseType === 'couchbase') { %>"existing_id"<% } else if (databaseType === 'cassandra') { %>UUID.randomUUID()<% } %>);
        <%_ if (usesDto) { _%>
        <%= asDto(entityClass) %> <%= asDto(entityInstance) %> = <%= entityInstance %>Mapper.toDto(<%= asEntity(entityInstance) %>);
        <%_ } _%>

        // An entity with an existing ID cannot be created, so this API call must fail
        @SuppressWarnings("unchecked")
        HttpResponse<<%= httpEntityClass %>> response = client.exchange(HttpRequest.POST("/api/<%= entityApiUrl %>", <%= httpEntityInstance %>), <%= httpEntityClass %>.class)
            .onErrorReturn(t -> (HttpResponse<<%= httpEntityClass %>>) ((HttpClientResponseException) t).getResponse()).blockingFirst();

        assertThat(response.status().getCode()).isEqualTo(HttpStatus.BAD_REQUEST.getCode());

        // Validate the <%= entityClass %> in the database
        List<<%= asEntity(entityClass) %>> <%= entityInstance %>List = <%= entityInstance %>Repository.findAll();
        assertThat(<%= entityInstance %>List).hasSize(databaseSizeBeforeCreate);
        <%_ if (searchEngine === 'elasticsearch') { _%>

        // Validate the <%= entityClass %> in Elasticsearch
        verify(mock<%= entityClass %>SearchRepository, times(0)).save(<%= asEntity(entityInstance) %>);
        <%_ } _%>
    }

<% for (idx in fields) { %><% if (fields[idx].fieldValidate === true) {
    let required = false;
    if (fields[idx].fieldType !== 'byte[]' && fields[idx].fieldValidate === true && fields[idx].fieldValidateRules.includes('required')) {
        required = true;
    }
    if (required) { %>
    @Test
    public void check<%= fields[idx].fieldInJavaBeanMethod %>IsRequired() throws Exception {
        int databaseSizeBeforeTest = <%= entityInstance %>Repository.findAll().size();
        // set the field null
        <%= asEntity(entityInstance) %>.set<%= fields[idx].fieldInJavaBeanMethod %>(null);

        // Create the <%= entityClass %>, which fails.<% if (usesDto) { %>
        <%= asDto(entityClass) %> <%= asDto(entityInstance) %> = <%= entityInstance %>Mapper.toDto(<%= asEntity(entityInstance) %>);<% } %>

        @SuppressWarnings("unchecked")
        HttpResponse<<%= httpEntityClass %>> response = client.exchange(HttpRequest.POST("/api/<%= entityApiUrl %>", <%= httpEntityInstance %>), <%= httpEntityClass %>.class)
            .onErrorReturn(t -> (HttpResponse<<%= httpEntityClass %>>) ((HttpClientResponseException) t).getResponse()).blockingFirst();

        assertThat(response.status().getCode()).isEqualTo(HttpStatus.BAD_REQUEST.getCode());

        List<<%= asEntity(entityClass) %>> <%= entityInstance %>List = <%= entityInstance %>Repository.findAll();
        assertThat(<%= entityInstance %>List).hasSize(databaseSizeBeforeTest);
    }
<%_ } } } _%>
<%_ } _%>

    @Test
    public void getAll<%= entityClassPlural %>() throws Exception {
        // Initialize the database
        <%_ if (databaseType === 'cassandra') { _%>
        <%= asEntity(entityInstance) %>.setId(UUID.randomUUID());
        <%_ } _%>
        <%= entityInstance %>Repository.save<% if (databaseType === 'sql') { %>AndFlush<% } %>(<%= asEntity(entityInstance) %>);

        // Get the <%= entityInstance %>List w/ all the <%= entityInstancePlural %>
        List<<%= httpEntityClass %>> <%= entityInstancePlural %> = client.retrieve(HttpRequest.GET("/api/<%= entityApiUrl %>?eagerload=true"), Argument.listOf(<%= httpEntityClass %>.class)).blockingFirst();
        <%= httpEntityClass %> test<%= entityClass %> = <%= entityInstancePlural %>.get(0);

<%- include('../../common/validate_entity_fields_template', {isUpdate: false}); -%>
    }

    @Test
    public void get<%= entityClass %>() throws Exception {
        // Initialize the database
        <%_ if (databaseType === 'cassandra') { _%>
        <%= asEntity(entityInstance) %>.setId(UUID.randomUUID());
        <%_ } _%>
        <%= entityInstance %>Repository.save<% if (databaseType === 'sql') { %>AndFlush<% } %>(<%= asEntity(entityInstance) %>);

        // Get the <%= entityInstance %>
        <%= httpEntityClass %> test<%= entityClass %> = client.retrieve(HttpRequest.GET("/api/<%= entityApiUrl %>/" + <%= entityInstance %>.getId()), <%= httpEntityClass %>.class).blockingFirst();

<%- include('../../common/validate_entity_fields_template', {isUpdate: false}); -%>
    }

    @Test
    public void getNonExisting<%= entityClass %>() throws Exception {
        // Get the <%= entityInstance %>
        @SuppressWarnings("unchecked")
        HttpResponse<<%= httpEntityClass %>> response = client.exchange(HttpRequest.GET("/api/<%= entityApiUrl %>/"+ Long.MAX_VALUE), <%= httpEntityClass %>.class)
            .onErrorReturn(t -> (HttpResponse<<%= httpEntityClass %>>) ((HttpClientResponseException) t).getResponse()).blockingFirst();

        assertThat(response.status().getCode()).isEqualTo(HttpStatus.NOT_FOUND.getCode());
    }

<%_ if (!readOnly) { _%>
    @Test
    public void update<%= entityClass %>() throws Exception {
        // Initialize the database
        <%_ if (databaseType === 'cassandra') { _%>
        <%= asEntity(entityInstance) %>.setId(UUID.randomUUID());
        <%_ } _%>
    <%_ if (searchEngine === 'elasticsearch') { _%>
        // As the test used the service layer, reset the Elasticsearch mock repository
        reset(mock<%= entityClass %>SearchRepository);
    <%_ } _%>
        <%= entityInstance %>Repository.save<% if (databaseType === 'sql') { %>AndFlush<% } %>(<%= asEntity(entityInstance) %>);

        int databaseSizeBeforeUpdate = <%= entityInstance %>Repository.findAll().size();

        // Update the <%= entityInstance %>
        <%= asEntity(entityClass) %> updated<%= asEntity(entityClass) %> = <%= entityInstance %>Repository.findById(<%= asEntity(entityInstance) %>.getId()).get();

        <%_ if (fluentMethods && fields.length > 0) { _%>
        updated<%= asEntity(entityClass) %><% for (idx in fields) { %>
            .<%= fields[idx].fieldName %>(<%= 'UPDATED_' + fields[idx].fieldNameUnderscored.toUpperCase() %>)<% if ((fields[idx].fieldType === 'byte[]' || fields[idx].fieldType === 'ByteBuffer') && fields[idx].fieldTypeBlobContent !== 'text') { %>
            .<%= fields[idx].fieldName %>ContentType(<%= 'UPDATED_' + fields[idx].fieldNameUnderscored.toUpperCase() %>_CONTENT_TYPE)<% } %><% } %>;
        <%_ } else { _%>
            <%_ for (idx in fields) { _%>
        updated<%= asEntity(entityClass) %>.set<%= fields[idx].fieldInJavaBeanMethod %>(<%= 'UPDATED_' + fields[idx].fieldNameUnderscored.toUpperCase() %>);
                <%_ if ((fields[idx].fieldType === 'byte[]' || fields[idx].fieldType === 'ByteBuffer') && fields[idx].fieldTypeBlobContent !== 'text') { _%>
        updated<%= asEntity(entityClass) %>.set<%= fields[idx].fieldInJavaBeanMethod %>ContentType(<%= 'UPDATED_' + fields[idx].fieldNameUnderscored.toUpperCase() %>_CONTENT_TYPE);
                <%_ } _%>
            <%_ } _%>
        <%_ } _%>
        <%_ if (usesDto) { _%>
        <%= asDto(entityClass) %> updated<%= asDto(entityClass) %> = <%= entityInstance %>Mapper.toDto(updated<%= asEntity(entityClass) %>);
        <%_ } _%>

        @SuppressWarnings("unchecked")
        HttpResponse<<%= httpEntityClass %>> response = client.exchange(HttpRequest.PUT("/api/<%= entityApiUrl %>", updated<%= httpEntityClass %>), <%= httpEntityClass %>.class)
            .onErrorReturn(t -> (HttpResponse<<%= httpEntityClass %>>) ((HttpClientResponseException) t).getResponse()).blockingFirst();

        assertThat(response.status().getCode()).isEqualTo(HttpStatus.OK.getCode());

        // Validate the <%= entityClass %> in the database
        List<<%= asEntity(entityClass) %>> <%= entityInstance %>List = <%= entityInstance %>Repository.findAll();
        assertThat(<%= entityInstance %>List).hasSize(databaseSizeBeforeUpdate);
        <%= asEntity(entityClass) %> test<%= entityClass %> = <%= entityInstance %>List.get(<%= entityInstance %>List.size() - 1);
<%- include('../../common/validate_entity_fields_template', {isUpdate: true}); -%>
    }

    @Test
    public void updateNonExisting<%= entityClass %>() throws Exception {
        int databaseSizeBeforeUpdate = <%= entityInstance %>Repository.findAll().size();

        // Create the <%= entityClass %><% if (usesDto) { %>
        <%= asDto(entityClass) %> <%= asDto(entityInstance) %> = <%= entityInstance %>Mapper.toDto(<%= asEntity(entityInstance) %>);<% } %>

        // If the entity doesn't have an ID, it will throw BadRequestAlertException
        @SuppressWarnings("unchecked")
        HttpResponse<<%= httpEntityClass %>> response = client.exchange(HttpRequest.PUT("/api/<%= entityApiUrl %>", <%= httpEntityInstance %>), <%= httpEntityClass %>.class)
            .onErrorReturn(t -> (HttpResponse<<%= httpEntityClass %>>) ((HttpClientResponseException) t).getResponse()).blockingFirst();

        assertThat(response.status().getCode()).isEqualTo(HttpStatus.BAD_REQUEST.getCode());

        // Validate the <%= entityClass %> in the database
        List<<%= asEntity(entityClass) %>> <%= entityInstance %>List = <%= entityInstance %>Repository.findAll();
        assertThat(<%= entityInstance %>List).hasSize(databaseSizeBeforeUpdate);
        <%_ if (searchEngine === 'elasticsearch') { _%>

        // Validate the <%= entityClass %> in Elasticsearch
        verify(mock<%= entityClass %>SearchRepository, times(0)).save(<%= asEntity(entityInstance) %>);
        <%_ } _%>
    }

    @Test
    public void delete<%= entityClass %>() throws Exception {
        // Initialize the database with one entity
        <%_ if (databaseType === 'cassandra') { _%>
        <%= asEntity(entityInstance) %>.setId(UUID.randomUUID());
        <%_ } _%>
        <%= entityInstance %>Repository.save<% if (databaseType === 'sql') { %>AndFlush<% } %>(<%= asEntity(entityInstance) %>);

        int databaseSizeBeforeDelete = <%= entityInstance %>Repository.findAll().size();

        // Delete the <%= entityInstance %>
        @SuppressWarnings("unchecked")
        HttpResponse<<%= httpEntityClass %>> response = client.exchange(HttpRequest.DELETE("/api/<%= entityApiUrl %>/"+ <%= entityInstance %>.getId()), <%= httpEntityClass %>.class)
            .onErrorReturn(t -> (HttpResponse<<%= httpEntityClass %>>) ((HttpClientResponseException) t).getResponse()).blockingFirst();

        assertThat(response.status().getCode()).isEqualTo(HttpStatus.NO_CONTENT.getCode());

            // Validate the database is now empty
        List<<%= asEntity(entityClass) %>> <%= entityInstance %>List = <%= entityInstance %>Repository.findAll();
        assertThat(<%= entityInstance %>List).hasSize(databaseSizeBeforeDelete - 1);
        <%_ if (searchEngine === 'elasticsearch') { _%>

        // Validate the <%= entityClass %> in Elasticsearch
        verify(mock<%= entityClass %>SearchRepository, times(1)).deleteById(<%= asEntity(entityInstance) %>.getId());
        <%_ } _%>
    }
<%_ } _%>

    @Test
    public void equalsVerifier() throws Exception {
        TestUtil.equalsVerifier(<%= entityClass %>.class);
        <%= entityClass %> <%= asEntity(entityInstance) %>1 = new <%= entityClass %>();
        <%= asEntity(entityInstance) %>1.setId(1L);
        <%= entityClass %> <%= asEntity(entityInstance) %>2 = new <%= entityClass %>();
        <%= asEntity(entityInstance) %>2.setId(<%= asEntity(entityInstance) %>1.getId());
        assertThat(<%= asEntity(entityInstance) %>1).isEqualTo(<%= asEntity(entityInstance) %>2);
        <%= asEntity(entityInstance) %>2.setId(2L);
        assertThat(<%= asEntity(entityInstance) %>1).isNotEqualTo(<%= asEntity(entityInstance) %>2);
        <%= asEntity(entityInstance) %>1.setId(null);
        assertThat(<%= asEntity(entityInstance) %>1).isNotEqualTo(<%= asEntity(entityInstance) %>2);
    }
}
