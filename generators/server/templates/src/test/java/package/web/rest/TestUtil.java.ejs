package <%=packageName%>.web.rest;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;
<%_ if (databaseType === 'sql') { _%>
import io.micronaut.transaction.TransactionOperations;
<%_ } _%>
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

<%_ if (databaseType === 'sql') { _%>
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaDelete;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Root;
<%_ } _%>
import java.io.IOException;
<%_ if (databaseType === 'sql') { _%>
import java.sql.Connection;
<%_ } _%>
import java.util.List;

import static org.assertj.core.api.Assertions.assertThat;

/**
 * Utility class for testing REST controllers.
 */
public final class TestUtil {

    private static final ObjectMapper mapper = createObjectMapper();
    private static final Logger log = LoggerFactory.getLogger(TestUtil.class);

    private static ObjectMapper createObjectMapper() {
        ObjectMapper mapper = new ObjectMapper();
        mapper.setSerializationInclusion(JsonInclude.Include.NON_EMPTY);
        mapper.registerModule(new JavaTimeModule());
        return mapper;
    }

    /**
     * Convert an object to JSON byte array.
     *
     * @param object the object to convert.
     * @return the JSON byte array.
     * @throws IOException
     */
    public static byte[] convertObjectToJsonBytes(Object object) throws IOException {
        return mapper.writeValueAsBytes(object);
    }

    /**
     * Create a byte array with a specific size filled with specified data.
     *
     * @param size the size of the byte array.
     * @param data the data to put in the byte array.
     * @return the JSON byte array.
     */
    public static byte[] createByteArray(int size, String data) {
        byte[] byteArray = new byte[size];
        for (int i = 0; i < size; i++) {
            byteArray[i] = Byte.parseByte(data, 2);
        }
        return byteArray;
    }
    /**
     * Verifies the equals/hashcode contract on the domain object.
     */
    public static <T> void equalsVerifier(Class<T> clazz) throws Exception {
        T domainObject1 = clazz.getConstructor().newInstance();
        assertThat(domainObject1.toString()).isNotNull();
        assertThat(domainObject1).isEqualTo(domainObject1);
        assertThat(domainObject1.hashCode()).isEqualTo(domainObject1.hashCode());
        // Test with an instance of another class
        Object testOtherObject = new Object();
        assertThat(domainObject1).isNotEqualTo(testOtherObject);
        assertThat(domainObject1).isNotEqualTo(null);
        // Test with an instance of the same class
        T domainObject2 = clazz.getConstructor().newInstance();
        assertThat(domainObject1).isNotEqualTo(domainObject2);
        // HashCodes are equals because the objects are not persisted yet
        assertThat(domainObject1.hashCode()).isEqualTo(domainObject2.hashCode());
    }

<%_ if (databaseType === 'sql') { _%>
/**
     * Makes a an executes a query to the EntityManager finding all stored objects.
     * @param <T> The type of objects to be searched
     * @param transactionManager The instance of the TransactionOperations
     * @param em The instance of the EntityManager
     * @param clss The class type to be searched
     * @return A list of all found objects
     */
    public static <T> List<T> findAll(TransactionOperations<Connection> transactionManager, EntityManager em, Class<T> clss) {
        return transactionManager.executeRead(status -> {
            CriteriaBuilder cb = em.getCriteriaBuilder();
            CriteriaQuery<T> cq = cb.createQuery(clss);
            Root<T> rootEntry = cq.from(clss);
            CriteriaQuery<T> all = cq.select(rootEntry);
            TypedQuery<T> allQuery = em.createQuery(all);
            return allQuery.getResultList();
        });
    }

    /**
     * Makes a an executes a query to the EntityManager removing all stored objects.
     * @param transactionManager The instance of the TransactionOperations
     * @param em The instance of the EntityManager
     * @param clss The class type to be searched
     * @param <T>
     */
    public static <T> void removeAll(TransactionOperations<Connection> transactionManager, EntityManager em, Class<T> clss) {
        try {
            transactionManager.executeWrite(status -> {
                CriteriaBuilder cb = em.getCriteriaBuilder();
                CriteriaDelete<T> query = cb.createCriteriaDelete(clss);
                Root<T> root = query.from(clss);
                query.where(root.isNotNull());
                return em.createQuery(query).executeUpdate();
            });
        } catch (Exception e) {
            log.warn("Failed to remove instances", e);
        }
    }

<%_ } _%>
    private TestUtil() {}
}
