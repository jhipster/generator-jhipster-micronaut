<%#
 Copyright 2019-2024 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
plugins {
    id "io.micronaut.application"
    id "java"
    id "maven-publish"
    id "idea"
    id "application"
    id "com.gorylenko.gradle-git-properties"
    <%_ if (enableSwaggerCodegen) { _%>
    id "org.openapi.generator"
    <%_ } _%>
    <%_ if (!skipClient) { _%>
    id "com.github.node-gradle.node"
    <%_ } _%>
    id "org.sonarqube"
    id "com.github.johnrengelman.shadow"
    // jhipster-needle-gradle-plugins - JHipster will add additional gradle plugins here
}

repositories {
    mavenCentral()
    gradlePluginPortal()
}

graalvmNative.toolchainDetection = false

micronaut {
    runtime "netty"
    testRuntime "junit5"
    processing {
        incremental true
        annotations "<%= packageName %>.*"
    }
}

group = "<%= packageName %>"
version = "0.0.1-SNAPSHOT"

description = ""

sourceCompatibility=<%= JAVA_VERSION %>
targetCompatibility=<%= JAVA_VERSION %>
assert System.properties["java.specification.version"] == "17" || "18" || "19" || "20" || "21"

apply from: "gradle/docker.gradle"

<%_ if (enableSwaggerCodegen) { _%>
apply from: "gradle/swagger.gradle"
<%_ } _%>
// jhipster-needle-gradle-apply-from - JHipster will add additional gradle scripts to be applied here

if (project.hasProperty("prod") || project.hasProperty("gae")) {
    apply from: "gradle/profile_prod.gradle"
} else {
    apply from: "gradle/profile_dev.gradle"
}

if (project.hasProperty("war")) {
    apply from: "gradle/war.gradle"
}

if (project.hasProperty("gae")) {
    apply plugin: 'maven'
    // TODO what are our equivalent gae deps?
//    apply plugin: 'org.springframework.boot.experimental.thin-launcher'
//    apply plugin: 'io.spring.dependency-management'

    dependencyManagement {
        imports {
            mavenBom 'tech.jhipster:jhipster-dependencies:${jhipster_dependencies_version}'
        }
    }
    appengineStage.dependsOn thinResolve
}

<%_ if (serviceDiscoveryType || applicationTypeGateway || applicationTypeMicroservice || applicationType === 'uaa') { _%>
if (project.hasProperty("zipkin")) {
    apply from: "gradle/zipkin.gradle"
}
<%_ } _%>

idea {
    module {
        excludeDirs += files("node_modules")
    }
}

eclipse {
    sourceSets {
        main {
            java {
                srcDirs += ["build/generated/sources/annotationProcessor/java/main"]
            }
        }
    }
}

defaultTasks "run"

mainClassName = "<%= packageName %>.<%= mainClass %>"

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
    options.compilerArgs.addAll([
        '-parameters',
        // enables incremental compilation
        '-Amicronaut.processing.incremental=true',
        '-Amicronaut.processing.annotations=<%= packageName %>.*',
        "-Amicronaut.processing.group=$project.group",
        "-Amicronaut.processing.module=$project.name",
    ])
}

test {
    useJUnitPlatform()
    exclude "**/*IT*", "**/*IntTest*"

    testLogging {
        events 'FAILED', 'SKIPPED'
    }
    // uncomment if the tests reports are not generated
    // see https://github.com/jhipster/generator-jhipster/pull/2771 and https://github.com/jhipster/generator-jhipster/pull/4484
    // ignoreFailures true
    reports.html.required = false
}

task integrationTest(type: Test) {
    useJUnitPlatform()
    description = "Execute integration tests."
    group = "verification"
    include "**/*IT*", "**/*IntTest*"
<%_ if (cucumberTests) { _%>
    exclude "**/*CucumberIT*"
<%_ } _%>

    testLogging {
        events 'FAILED', 'SKIPPED'
    }
    // uncomment if the tests reports are not generated
    // see https://github.com/jhipster/generator-jhipster/pull/2771 and https://github.com/jhipster/generator-jhipster/pull/4484
    // ignoreFailures true
    reports.html.required = false
}
<%_ if (cucumberTests) { _%>

task cucumberTest(type: Test) {
    description = "Execute cucumber BDD tests."
    group = "verification"
    include "**/*CucumberIT*"

    // uncomment if the tests reports are not generated
    // see https://github.com/jhipster/generator-jhipster/pull/2771 and https://github.com/jhipster/generator-jhipster/pull/4484
    // ignoreFailures true
    reports.html.required = false
}

check.dependsOn cucumberTest
<%_ } _%>

check.dependsOn integrationTest
task testReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/tests")
    reportOn test
}

task integrationTestReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/tests")
    reportOn integrationTest
}

<%_ if (cucumberTests) { _%>
task cucumberTestReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/tests")
    reportOn cucumberTest
}

<%_ } _%>
<%_ if (databaseTypeSql) {
        const { sqlDb } = MN_CONSTANTS;
        const devDbInfo = sqlDb[devDatabaseType];
_%>
if (!project.hasProperty("runList")) {
    project.ext.runList = "main"
}

<%_ } _%>
shadowJar {
    mergeServiceFiles()
}

gitProperties {
    failOnNoGitDirectory = false
    keys = ["git.branch", "git.commit.id.abbrev", "git.commit.id.describe"]
}

configurations {
    providedRuntime
    liquibaseRuntime.extendsFrom sourceSets.main.compileClasspath
}

repositories {
    mavenLocal()
    mavenCentral()
    <%_ if (jhipsterDependenciesVersion.endsWith('-SNAPSHOT')) { _%>
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots/"
        mavenContent {
            snapshotsOnly()
        }
    }
    <%_ } _%>
    // jhipster-needle-gradle-repositories - JHipster will add additional repositories
}

dependencies {
    // import JHipster dependencies BOM
    if (!project.hasProperty("gae")) {
        implementation platform("tech.jhipster:jhipster-dependencies:${jhipster_dependencies_version}") {
            exclude group: 'org.hibernate'
        }
    }

    annotationProcessor "io.micronaut.validation:micronaut-validation-processor"
    <%_ if (databaseTypeSql) { _%>
    annotationProcessor "io.micronaut.data:micronaut-data-processor"
    <%_ } _%>
    annotationProcessor "io.micronaut.openapi:micronaut-openapi"

    // Use ", version: jhipster_dependencies_version, changing: true" if you want
    // to use a SNAPSHOT release instead of a stable release
    implementation (group: "tech.jhipster", name: "jhipster-framework") {
        exclude group: "org.springframework", module: "spring-context-support"
        <% if (reactive) { %>
        exclude group: "org.springframework", module: "spring-webmvc"
        <% } %>
        exclude group: "org.springframework.boot", module: "spring-boot-autoconfigure"
        exclude group: "org.springframework.boot", module: "spring-boot-starter-aop"
        exclude group: "org.springframework.boot", module: "spring-boot-starter-web"
        exclude group: "org.springframework.boot", module: "spring-boot-starter-validation"
    }
    implementation "ch.qos.logback:logback-classic:$logback_version"
    implementation "io.swagger.core.v3:swagger-annotations:$swagger_annotations_version"
    implementation "io.micrometer:micrometer-registry-prometheus"
    implementation "net.logstash.logback:logstash-logback-encoder"

    implementation "com.fasterxml.jackson.core:jackson-annotations"
    implementation "com.fasterxml.jackson.core:jackson-databind"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310"
    <%_ if (databaseTypeSql) { _%>
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-hibernate6"
    <%_ } _%>
    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml"
    implementation "io.micronaut:micronaut-jackson-databind"
    <%_ if (applicationTypeGateway) { _%>
    implementation "org.apache.httpcomponents:httpclient"
    <%_ } _%>
    <%_ if (cacheProvider === 'hazelcast') { _%>
    implementation "com.hazelcast:hazelcast"
    <%_ } _%>
    <%_ if (cacheProvider === 'hazelcast' && enableHibernateCache) { _%>
    implementation "com.hazelcast:hazelcast-hibernate53"
    <%_ } _%>
    <%_ if (cacheProvider === 'hazelcast') { _%>
    implementation "com.hazelcast:hazelcast-spring"
    <%_ } _%>
    <%_ if (cacheProvider === 'infinispan') { _%>
    implementation "org.infinispan:infinispan-hibernate-cache-v53"
    implementation "org.infinispan:infinispan-spring-boot-starter-embedded"
    implementation "org.infinispan:infinispan-core"
    implementation "org.infinispan:infinispan-jcache"
    implementation ("org.infinispan:infinispan-cloud") {
        exclude module: "undertow-core"
    }
    <%_ } _%>
    <%_ if (cacheProvider === 'memcached') { _%>
    implementation "com.google.code.simple-spring-memcached:spring-cache"
    implementation "com.google.code.simple-spring-memcached:xmemcached-provider"
    implementation "com.googlecode.xmemcached:xmemcached"
    <%_ } _%>
    <%_ if (cacheProvider === 'redis') { _%>
    implementation "org.redisson:redisson"
        <%_ if (enableHibernateCache) { _%>
    implementation "org.hibernate:hibernate-jcache:$hibernate_version"
        <%_ } _%>
    testImplementation "org.testcontainers:testcontainers:$testcontainers_version"
    <%_ } _%>
    <%_ if (['ehcache', 'caffeine', 'hazelcast', 'infinispan', 'redis'].includes(cacheProvider) || applicationTypeGateway) { _%>
    implementation "io.micronaut.cache:micronaut-cache-core"
    implementation "javax.cache:cache-api"
    <%_ } _%>
    <%_ if (databaseTypeSql) { _%>
    implementation "org.hibernate:hibernate-core:$hibernate_version"
    implementation "com.zaxxer:HikariCP"
    <%_ } _%>
    <%_ if (databaseType === 'cassandra' || applicationTypeGateway) { _%>
    implementation "commons-codec:commons-codec"
    <%_ } _%>
    <%_ if (enableSwaggerCodegen) { _%>
    implementation "org.openapitools:jackson-databind-nullable:${jackson_databind_nullable_version}"
    <%_ } _%>
    implementation "org.apache.commons:commons-lang3"
    <%_ if (databaseType === 'cassandra') { _%>
    implementation "org.lz4:lz4-java"
    <%_ } _%>
    <%_ if (cacheProvider === 'ehcache') { _%>
    implementation "org.ehcache:ehcache"
    implementation "io.micronaut.cache:micronaut-cache-ehcache"
        <%_ if (enableHibernateCache) { _%>
    implementation "org.hibernate:hibernate-jcache:$hibernate_version"
        <%_ } _%>
    <%_ } _%>
    <%_ if (cacheProvider === 'caffeine') { _%>
    implementation "com.github.ben-manes.caffeine:caffeine:${caffeine_version}"
    implementation "com.github.ben-manes.caffeine:jcache:${caffeine_version}"
    implementation "com.typesafe:config:${typesafe_config_version}"
    implementation "io.micronaut.cache:micronaut-cache-caffeine"
        <%_ if (enableHibernateCache) { _%>
    implementation "org.hibernate:hibernate-jcache:$hibernate_version"
        <%_ } _%>
    <%_ } _%>
    <%_ if (databaseTypeSql) { _%>
    implementation "org.liquibase:liquibase-core"
    liquibaseRuntime "org.liquibase:liquibase-core"
    liquibaseRuntime "org.liquibase.ext:liquibase-hibernate6:${liquibase_hibernate6_version}"
    <%_ } _%>

    runtimeOnly "org.yaml:snakeyaml"
    implementation "io.micronaut:micronaut-inject"
    implementation "io.micronaut:micronaut-http-client"
    implementation "io.micronaut:micronaut-http-server-netty"
    implementation "io.micronaut:micronaut-management"
    implementation "io.micronaut.security:micronaut-security-jwt"
<%_ if (authenticationTypeOauth2) { _%>
    implementation "io.micronaut.security:micronaut-security-oauth2"
<%_ } _%>
    implementation "io.micronaut.views:micronaut-views-thymeleaf"

<%_ if (!skipUserManagement) { _%>
    implementation "org.mindrot:jbcrypt:$jbcrypt_version"
<%_ } _%>

    compileOnly "org.graalvm.nativeimage:svm"

    implementation "io.micronaut.validation:micronaut-validation"
    implementation "io.micronaut.liquibase:micronaut-liquibase"
    implementation "io.micronaut.sql:micronaut-jdbc-hikari"
    implementation "io.micronaut.jmx:micronaut-jmx"
    implementation "io.micronaut.micrometer:micronaut-micrometer-core"
    implementation "io.micronaut.micrometer:micronaut-micrometer-registry-prometheus"
    implementation "io.micronaut.data:micronaut-data-runtime:$micronaut_data_version"
    implementation ("io.micronaut.data:micronaut-data-hibernate-jpa:$micronaut_data_version") {
        exclude group: 'io.micronaut', module: 'micronaut-jdbc'
    }
    implementation("io.micronaut.data:micronaut-data-jdbc:$micronaut_data_version") {
        exclude group: 'io.micronaut', module: 'micronaut-jdbc'
    }
    implementation "jakarta.persistence:jakarta.persistence-api:3.1.0"
<%_ if (serviceDiscoveryType === 'eureka' || serviceDiscoveryType === 'consul') { _%>
    implementation "io.micronaut.discovery:micronaut-discovery-client:$micronaut_discovery_client_version"
<%_ } _%>

    implementation("io.micronaut.email:micronaut-email-javamail")
    runtimeOnly("org.eclipse.angus:angus-mail")
    implementation("io.micronaut.email:micronaut-email-template")
    implementation("io.micronaut.views:micronaut-views-thymeleaf")

    implementation "org.zalando:problem-violations:$problem_version"
    implementation "org.zalando:jackson-datatype-problem:0.27.1"
    <%_ if (searchEngine === 'elasticsearch') { _%>

    // log4j2-mock needed to create embedded elasticsearch instance with SLF4J
    runtimeOnly "de.dentrassi.elasticsearch:log4j2-mock:$log4j2_mock_version"
    <%_ } _%>
    <%_ if (['mongodb', 'cassandra', 'couchbase'].includes(databaseType)) { _%>

    <%_ } _%>
    <%_ if (messageBroker === 'kafka') { _%>
        <%_ if (!reactive) { _%>
    implementation "org.apache.kafka:kafka-clients"
        <%_ } else { _%>
    implementation "io.projectreactor.kafka:reactor-kafka"
        <%_ } _%>
    <%_ } _%>

    <%_ if (!reactive) { _%>

    <%_ } _%>
    <%_ if (reactive) { _%>

    implementation "io.netty:netty-tcnative-boringssl-static"
    <%_ } _%>
    <%_ if (websocket === 'spring-websocket') { _%>

    <%_ } _%>


    <%_ if (databaseType === 'cassandra') { _%>
    implementation "com.datastax.cassandra:cassandra-driver-extras"
    implementation "com.datastax.cassandra:cassandra-driver-mapping"
    <%_ } _%>
    <%_ if (applicationTypeGateway) { _%>

    implementation "com.github.vladimir-bukhtoyarov:bucket4j-core"
    implementation "com.github.vladimir-bukhtoyarov:bucket4j-jcache"
    <%_ } _%>
    <%_ if (applicationTypeMicroservice || applicationTypeGateway || applicationType === 'uaa') { _%>

    <%_ } _%>
    <%_ if (serviceDiscoveryType === 'eureka') { _%>

    <%_ } _%>
    <%_ if (serviceDiscoveryType === 'consul') { _%>

    <%_ } _%>
    <%_ if (authenticationType === 'uaa') { _%>

    <%_ } _%>
    <%_ if (applicationTypeMicroservice || applicationTypeGateway || applicationType === 'uaa') { _%>

    <%_ } _%>

    <%_ if (authenticationTypeOauth2) { _%>

    <%_ } _%>

    <%_ if (authenticationType === 'uaa') { _%>

    <% if (databaseTypeSql) { %>implementation<% } else { %>runtimeOnly<% } %> "org.glassfish.jaxb:jaxb-runtime:$jaxb_runtime_version"
    <%_ } _%>
    <%_ if (databaseType === 'mongodb') { _%>
    implementation "com.github.mongobee:mongobee"
    <%_ } _%>
    <%_ if (databaseType === 'couchbase') { _%>
    implementation "com.github.differentway:couchmove"
    implementation "com.couchbase.client:java-client"
    implementation "com.couchbase.client:encryption"
    <%_ } _%>
    <%_ if (prodDatabaseType === 'mysql') { _%>
    implementation "mysql:mysql-connector-java"
    <%_ } _%>
    <%_ if (prodDatabaseType === 'postgresql') { _%>
    implementation "org.postgresql:postgresql"
    <%_ } _%>
    <%_ if (prodDatabaseType === 'mariadb') { _%>
    implementation "org.mariadb.jdbc:mariadb-java-client"
    <%_ } _%>
    <%_ if (prodDatabaseType === 'mssql') { _%>
    implementation "com.microsoft.sqlserver:mssql-jdbc"
    <%_ } _%>
    implementation "org.mapstruct:mapstruct:${mapstruct_version}"
    annotationProcessor "org.mapstruct:mapstruct-processor:$mapstruct_version"
    <%_ if (databaseTypeSql) { _%>
    annotationProcessor "org.hibernate:hibernate-jpamodelgen:$hibernate_version"
    annotationProcessor "org.glassfish.jaxb:jaxb-runtime:$jaxb_runtime_version"
    <%_ } _%>
    annotationProcessor("io.micronaut:micronaut-inject-java")
    annotationProcessor("io.micronaut.data:micronaut-data-processor")
    annotationProcessor("io.micronaut:micronaut-http-validation")
    annotationProcessor("io.micronaut.openapi:micronaut-openapi")

    // Micronaut test deps
    testAnnotationProcessor "io.micronaut.data:micronaut-data-processor"
    testAnnotationProcessor "org.glassfish.jaxb:jaxb-runtime:$jaxb_runtime_version"
    testImplementation "io.micronaut.test:micronaut-test-junit5"

    testImplementation "org.junit.jupiter:junit-jupiter-engine"
    testImplementation "org.junit.jupiter:junit-jupiter-api"
    testImplementation "org.assertj:assertj-core"
    testImplementation "org.mockito:mockito-core:$mockito_version"

    testImplementation "com.tngtech.archunit:archunit-junit5-api:${archunit_junit5_version}"
    testRuntimeOnly "com.tngtech.archunit:archunit-junit5-engine:${archunit_junit5_version}"
    <%_ if (databaseType === 'mongodb') { _%>
    testImplementation "de.flapdoodle.embed:de.flapdoodle.embed.mongo"
    <%_ } _%>
    <%_ if (databaseType === 'couchbase') { _%>
    testImplementation "org.testcontainers:couchbase"
    <%_ } _%>
    <%_ if (databaseTypeSql) { _%>
    testImplementation "com.h2database:h2"
    <%_ } _%>
    <%_ if (devDatabaseType === 'oracle' || prodDatabaseType === 'oracle') { _%>
    implementation "com.oracle.ojdbc:ojdbc8"
    <%_ } _%>
    <%_ if (messageBroker === 'kafka') { _%>
    testImplementation "org.testcontainers:kafka"
    <%_ } _%>

    implementation("io.micronaut.rxjava3:micronaut-rxjava3")
    implementation("io.micronaut.rxjava3:micronaut-rxjava3-http-client:$rxJava3Version")

    // jhipster-needle-gradle-dependency - JHipster will add additional dependencies here
}

if (project.hasProperty("gae")) {
    task createPom {
        def basePath = 'build/resources/main/META-INF/maven'
        doLast {
            pom {
                withXml(dependencyManagement.pomConfigurer)
            }.writeTo("${basePath}/${project.group}/${project.name}/pom.xml")
        }
    }
}

task cleanResources(type: Delete) {
    delete "build/resources"
    delete "build/layers"
}

wrapper {
    gradleVersion = "<%= gradleVersion %>"
}

<%_ if (!skipClient) { _%>
task webapp_test(type: NpmTask, dependsOn: "npm_install") {
    args = ["run", "webapp:test"]
}

if (project.hasProperty("nodeInstall")) {
    node {
        version = "${node_version}"
        npmVersion = "${npm_version}"
        download = true
    }
}

test.dependsOn webapp_test
<%_ } _%>

compileJava.dependsOn processResources
