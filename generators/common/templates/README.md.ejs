<%#
 Copyright 2013-2020 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
# <%= baseName %>
<%_
let clientPackageMngrName = 'Npm';
let clientPackageMngrAddGlobal = 'install -g';
let clientPackageMngrAdd = 'install --save --save-exact';
let clientPackageMngrAddDev = 'install --save-dev --save-exact';
if (clientPackageManager === 'yarn') {
    clientPackageMngrName = 'Yarn';
    clientPackageMngrAddGlobal = 'global add';
    clientPackageMngrAdd = 'add --exact';
    clientPackageMngrAddDev = 'add --dev --exact';
}
let DOCUMENTATION_ARCHIVE_URL = `${DOCUMENTATION_URL + DOCUMENTATION_ARCHIVE_PATH}v${jhipsterVersion}`;
_%>

> ## ðŸ›  Blueprint In Active Development
> This project was generated by a *PREVIEW* of a [Micronaut](https://micronaut.io) blueprint for [JHipster](https://jhipster.tech).
> While we are working to create a complete experience, there are likely some gaps.
> Please [let us know](https://github.com/jhipster/generator-jhipster-micronaut/issues) if you encounter issues.
>

This application was generated with [MHipster](https://github.com/jhipster/generator-jhipster-micronaut), a [Micronaut](https://micronaut.io) blueprint for [JHipster](https://www.jhipster.tech)!
You can find documentation and help at [https://github.com/jhipster/generator-jhipster-micronaut](https://github.com/jhipster/generator-jhipster-micronaut).

## Development

<%_ if (skipClient) { _%>
To start your application in the dev profile, run:

    <% if (buildTool === 'maven') { %>./mvnw<% } %><% if (buildTool === 'gradle') { %>./gradlew<% } %>

<%_ } _%>
<%_ if (!skipClient) { _%>
Before you can build this project, you must install and configure the following dependencies on your machine:

1. [Node.js][]: We use Node to run a development web server and build the project.
   Depending on your system, you can install Node either from source or as a pre-packaged bundle.
<%_ if (clientPackageManager === 'yarn') { _%>
2. [Yarn][]: We use Yarn to manage Node dependencies.
   Depending on your system, you can install Yarn either from source or as a pre-packaged bundle.
<%_ } _%>

After installing Node, you should be able to run the following command to install development tools.
You will only need to run this command when dependencies change in [package.json](package.json).

    <%= clientPackageManager %> install

We use <%= clientPackageManager %> scripts and [Webpack][] as our build system.

Run the following commands in two separate terminals to create a blissful development experience where your browser
auto-refreshes when files change on your hard drive.
<% if (buildTool === 'maven') { %>
    ./mvnw<% } %><% if (buildTool === 'gradle') { %>
    ./gradlew -x webpack<% } %>
    <%= clientPackageManager %> start

<%= clientPackageMngrName %> is also used to manage CSS and JavaScript dependencies used in this application. You can upgrade dependencies by
specifying a newer version in [package.json](package.json). You can also run `<%= clientPackageManager %> update` and `<%= clientPackageManager %> install` to manage dependencies.
Add the `help` flag on any command to see how you can use it. For example, `<%= clientPackageManager %> help update`.

The `<%= clientPackageManager %> run` command will list all of the scripts available to run for this project.
<%_ if (authenticationType === 'oauth2') { _%>

## OAuth 2.0 / OpenID Connect

Congratulations! You've selected an excellent way to secure your JHipster application. If you're not sure what OAuth and OpenID Connect (OIDC) are, please see [What the Heck is OAuth?](https://developer.okta.com/blog/2017/06/21/what-the-heck-is-oauth)

To log in to your app, you'll need to have [Keycloak](https://keycloak.org) up and running. The JHipster Team has created a Docker container for you that has the default users and roles. Start Keycloak using the following command.

```
docker-compose -f src/main/docker/keycloak.yml up
```

The security settings in `src/main/resources/config/application.yml` are configured for this image.

```yaml
micronaut:
  ...
  security:
    oauth2:
      enabled: true
      clients:
        oidc:
          client-secret: web_app
          client-id: web_app
          openid:
            issuer: http://localhost:9080/auth/realms/jhipster
      login-uri: /oauth2/authorization{/provider}
      callback-uri: /oauth2/callback{/provider}
```

<%_ } _%>

### PWA Support

JHipster ships with PWA (Progressive Web App) support, and it's turned off by default. One of the main components of a PWA is a service worker.

The service worker initialization code is commented out by default. To enable it, uncomment the following code in `src/main/webapp/index.html`:

```html
<script>
    if ('serviceWorker' in navigator) {
        navigator.serviceWorker
        .register('./service-worker.js')
        .then(function() { console.log('Service Worker Registered'); });
    }
</script>
```

Note: [Workbox](https://developers.google.com/web/tools/workbox/) powers JHipster's service worker. It dynamically generates the `service-worker.js` file.

### Managing dependencies

For example, to add [Leaflet][] library as a runtime dependency of your application, you would run following command:

    <%= clientPackageManager %> <%= clientPackageMngrAdd %> leaflet

To benefit from TypeScript type definitions from [DefinitelyTyped][] repository in development, you would run following command:

    <%= clientPackageManager %> <%= clientPackageMngrAddDev %> @types/leaflet

Then you would import the JS and CSS files specified in library's installation instructions so that [Webpack][] knows about them:
<%_ if (clientFramework === ANGULAR) { _%>
Edit [<%= CLIENT_MAIN_SRC_DIR %>app/vendor.ts](<%= CLIENT_MAIN_SRC_DIR %>app/vendor.ts) file:
~~~
import 'leaflet/dist/leaflet.js';
~~~

Edit [<%= CLIENT_MAIN_SRC_DIR %>content/scss/vendor.scss](<%= CLIENT_MAIN_SRC_DIR %>content/scss/vendor.scss) file:
~~~
@import '~leaflet/dist/leaflet.css';
~~~
<%_ } _%>
Note: There are still a few other things remaining to do for Leaflet that we won't detail here.
<%_ } _%>

For further instructions on how to develop with JHipster, have a look at [Using JHipster in development][].

<%_ if (clientFramework === ANGULAR && applicationType !== 'microservice') { _%>
### Using Angular CLI

You can also use [Angular CLI][] to generate some custom client code.

For example, the following command:

    ng generate component my-component

will generate few files:

    create <%= CLIENT_MAIN_SRC_DIR %>app/my-component/my-component.component.html
    create <%= CLIENT_MAIN_SRC_DIR %>app/my-component/my-component.component.ts
    update <%= CLIENT_MAIN_SRC_DIR %>app/app.module.ts
<%_ } _%>
<%_ if (enableSwaggerCodegen) { _%>
### Doing API-First development using openapi-generator

[OpenAPI-Generator]() is configured for this application. You can generate API code from the `src/main/resources/swagger/api.yml` definition file by running:
    <%_ if (buildTool === 'maven') { _%>
```bash
./mvnw generate-sources
```
    <%_ } _%>
    <%_ if (buildTool === 'gradle') { _%>
```bash
./gradlew openApiGenerate
```
    <%_ } _%>
Then implements the generated delegate classes with `@Singleton` classes.

To edit the `api.yml` definition file, you can use a tool such as [Swagger-Editor](). Start a local instance of the swagger-editor using docker by running: `docker-compose -f src/main/docker/swagger-editor.yml up -d`. The editor will then be reachable at [http://localhost:7742](http://localhost:7742).

Refer to [Doing API-First development][] for more details.
<%_ } _%>

## Building for production

### Packaging as jar

To build a jar, run:
<% if (buildTool === 'maven') { %>
    Use `./mvnw clean verify`
<% } %>
<% if (buildTool === 'gradle') { %>
    ./gradlew clean jar
<% } %>

<%_ if (!skipClient) { _%>
This will concatenate and minify the client CSS and JavaScript files. It will also modify `index.html` so it references these new files.
<%_ } _%>
To ensure everything worked, run:
<% if (buildTool === 'maven') { %>
    java -jar target/*.jar<% } %><% if (buildTool === 'gradle') { %>
    java -jar build/libs/*.jar<% } %>

<% if (!skipClient) { %>Then navigate to [http://localhost:<%= serverPort %>](http://localhost:<%= serverPort %>) in your browser.
<% } %>
Refer to [Using JHipster in production][] for more details.

## Testing

To launch your application's tests, run:

    <%_ if (buildTool === 'maven') { _%>
    ./mvnw verify
    <%_ } else { _%>
    ./gradlew test integrationTest jacocoTestReport
    <%_ } _%>
<% if (!skipClient) { %>
### Client tests

Unit tests are run by [Jest][] and written with [Jasmine][]. They're located in [<%= CLIENT_TEST_SRC_DIR %>](<%= CLIENT_TEST_SRC_DIR %>) and can be run with:

    <%= clientPackageManager %> test

<% if (protractorTests) { %>UI end-to-end tests are powered by [Protractor][], which is built on top of WebDriverJS. They're located in [<%= CLIENT_TEST_SRC_DIR %>e2e](<%= CLIENT_TEST_SRC_DIR %>e2e)
and can be run by starting Spring Boot in one terminal (`<% if (buildTool === 'maven') { %>./mvnw spring-boot:run<% } else { %>./gradlew bootRun<% } %>`) and running the tests (`<%= clientPackageManager %> run e2e`) in a second one.<% } %>
<% } %>
For more information, refer to the [Running tests page][].

### Code quality

Sonar is used to analyse code quality. You can start a local Sonar server (accessible on http://localhost:9001) with:

```
docker-compose -f src/main/docker/sonar.yml up -d
```

You can run a Sonar analysis with using the [sonar-scanner](https://docs.sonarqube.org/display/SCAN/Analyzing+with+SonarQube+Scanner)<% if (buildTool) { %> or by using the <% if (buildTool === 'maven') { %>maven<% } %><% if (buildTool === 'gradle') { %>gradle<% } %> plugin<% } %>.

Then, run a Sonar analysis:

<%_ if (buildTool === 'maven') { _%>
```
./mvnw -Pprod clean verify sonar:sonar
```

If you need to re-run the Sonar phase, please be sure to specify at least the `initialize` phase since Sonar properties are loaded from the sonar-project.properties file.

```
./mvnw initialize sonar:sonar
```
or
<%_ } else if (buildTool === 'gradle') { _%>
```
./gradlew -Pprod clean check jacocoTestReport sonarqube
```
<%_ } _%>

For more information, refer to the [Code quality page][].

## Using Docker to simplify development (optional)

You can use Docker to improve your JHipster development experience. A number of docker-compose configuration are available in the [src/main/docker](src/main/docker) folder to launch required third party services.
<% if (databaseType !== 'no') { %>
For example, to start a <%= prodDatabaseType %> database in a docker container, run:

    docker-compose -f src/main/docker/<%= prodDatabaseType %>.yml up -d

To stop it and remove the container, run:

    docker-compose -f src/main/docker/<%= prodDatabaseType %>.yml down
<% } %>
You can also fully dockerize your application and all the services that it depends on.
To achieve this, first build a docker image of your app by running:

    <% if (buildTool === 'maven') { %>./mvnw -Pprod verify jib:dockerBuild<% } %><% if (buildTool === 'gradle') { %>../gradlew clean assemble dockerBuild -Pprod<% } %>
    <% if (buildTool === 'gradle') { %>
    Gradle uses official [micronaut-gradle-plugin](https://github.com/micronaut-projects/micronaut-gradle-plugin) for Docker image generation.
    <% } %><% if (buildTool === 'maven') { %>
    Maven uses [jib](https://cloud.google.com/blog/products/gcp/introducing-jib-build-java-docker-images-better) for Docker image generation.
    <% } %>
Then run:

    docker-compose -f src/main/docker/app.yml up -d

For more information refer to [Using Docker and Docker-Compose][], this page also contains information on the docker-compose sub-generator (`jhipster docker-compose`), which is able to generate docker configurations for one or several JHipster applications.

[Micronaut Blueprint for JHipster]: https://github.com/jhipster/generator-jhipster-micronaut
[Micronaut]: https://micronaut.io
[JHipster Homepage and latest documentation]: <%= DOCUMENTATION_URL %>
[JHipster <%= jhipsterVersion %> archive]: <%= DOCUMENTATION_ARCHIVE_URL %>
<% if (applicationType === 'gateway' || applicationType === 'microservice' || applicationType === 'uaa') { %>[Doing microservices with JHipster]: <%= DOCUMENTATION_ARCHIVE_URL %>/microservices-architecture/<% } %>
<%_ if (applicationType === 'uaa') { _%>[Using UAA for Microservice Security]: <%= DOCUMENTATION_ARCHIVE_URL %>/using-uaa/<%_ } _%>
[Using JHipster in development]: <%= DOCUMENTATION_ARCHIVE_URL %>/development/
<%_ if (serviceDiscoveryType === 'eureka') { _%>
[Service Discovery and Configuration with the JHipster-Registry]: <%= DOCUMENTATION_ARCHIVE_URL %>/microservices-architecture/#jhipster-registry
<%_ } _%>
<%_ if (serviceDiscoveryType === 'consul') { _%>
[Service Discovery and Configuration with Consul]: <%= DOCUMENTATION_ARCHIVE_URL %>/microservices-architecture/#consul
<%_ } _%>
[Using Docker and Docker-Compose]: <%= DOCUMENTATION_ARCHIVE_URL %>/docker-compose
[Using JHipster in production]: <%= DOCUMENTATION_ARCHIVE_URL %>/production/
[Running tests page]: <%= DOCUMENTATION_ARCHIVE_URL %>/running-tests/
[Code quality page]: <%= DOCUMENTATION_ARCHIVE_URL %>/code-quality/

<%_ if (!skipClient) { _%>
[Node.js]: https://nodejs.org/
[Yarn]: https://yarnpkg.org/
[Webpack]: https://webpack.github.io/
[Angular CLI]: https://cli.angular.io/
[BrowserSync]: https://www.browsersync.io/
[Jest]: https://facebook.github.io/jest/
[Jasmine]: https://jasmine.github.io/2.0/introduction.html
[Protractor]: https://angular.github.io/protractor/
[Leaflet]: https://leafletjs.com/
[DefinitelyTyped]: https://definitelytyped.org/
<%_ } _%>
<%_ if (enableSwaggerCodegen) { _%>
[OpenAPI-Generator]: https://openapi-generator.tech
[Swagger-Editor]: https://editor.swagger.io
[Doing API-First development]: <%= DOCUMENTATION_ARCHIVE_URL %>/doing-api-first-development/
<%_ } _%>
